{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/faq":{"title":"Frequently Asked Questions","data":{"":"How do I get my roles on Discord?\nObtaining roles is very simple, on our community Discord we have a channel called  ðŸ”‘ï¸±claim-role , which allows you to claim roles using the Tebex bot.\nWhere should I look for support?\nAs a new customer with a Customer role, you'll find a dedicated section named 'Customer Area' on our Discord server.\nThe  ðŸŽ«ï¸±script-support  channel serves as the exclusive support hub for our resources,\nwhere customers should seek assistance. If you can't access the  ðŸŽ«ï¸±script-support  channel, please open a ticket in the\n ðŸŽ«ï¸±general-support  channel and provide your transaction ID.\nI can't find my transaction id\nYou can find your transaction id at https://checkout.tebex.io/payment-history/login\nHow do I download and install the digital products I purchase?\nAfter purchase your product(s) will be available on your Portal account instantly!\nIs it possible to get a refund?\nA refund can only be processed if the conditions outlined in our refund policy are met. Please refer to our refund policy at: https://www.uniq-scripts.com/refund-policy.\nCan I transfer or give away my scripts?\nYes, from your Portal account you have the option to transfer one time to another person. You also have the option to buy as a gift from our website!\nI would like to cancel my subscription\nYou can manage your subscription at https://checkout.tebex.io/payment-history/login\nWhen checking out, it says \"payment declined\"\nIf your payment got declined there is nothing we can do. It usually fixes itself if you try later, or it might mean you have been banned from Tebex. Try using another payment method, credit card or device.\nI have XAMPP, how can I install MariaDB?\nFollow this video for a guide on how to switch to MariaDB: https://www.youtube.com/watch?v=bigFDwM8YCA"}},"/free":{"title":"Free Assets","data":{"":"Here you can find documentation for our free assets!"}},"/":{"title":"Documentation for ModHaven Scripts","data":{"":"Welcome to the documentation for ModHaven Scripts. Here you can find information on how to install, configure, use and troubleshoot our resources.If you need help with any of our resources, you can ask in the\n ðŸŽ«ï¸±support  channel in our Discord server."}},"/paid":{"title":"Paid Assets","data":{"":"Here you can find documentation for our paid assets!"}},"/paid/crypto":{"title":"Crypto","data":{}},"/paid/crypto/about":{"title":"About Asset","data":{}},"/paid/crypto/accessiable":{"title":"Accessible code","data":{}},"/paid/evidence":{"title":"Evidence System","data":{"":"System that allows your players to test shooting skills against each other."}},"/paid/evidence/about":{"title":"About Asset","data":{"compatible-frameworks#Compatible Frameworks:":"ESX\nQB Core\nQBOX","compatible-inventories#Compatible Inventories:":"ox_inventory\nqs-inventory\nqb-inventory\nps-inventory\nlj-inventory\ncodem-inventory\ncore_inventory\nYou can add your own inventory if it supports metadata on items."}},"/paid/evidence/accessiable":{"title":"Accessible code","data":{"":"if not IsESX() then return end\nlocal ESX = exports[Config.FrameworkName]:getSharedObject()\nRegisterNetEvent(Config.PlayerLoadedEvent.esx)\nAddEventHandler(Config.PlayerLoadedEvent.esx, function(xPlayer)\n    PlayerData = xPlayer\n    PlayerLoaded = true\n    Wait(1000)\n    LoadEvidence()\nend)\nRegisterNetEvent('esx:setJob')\nAddEventHandler('esx:setJob', function(job)\n    PlayerData.job = job\n    lib.hideTextUI()\nend)\nRegisterNetEvent('esx:onPlayerLogout', function()\n    table.wipe(PlayerData)\n    PlayerLoaded = false\n    RemoveEverything()\nend)\nfunction GetJob()\n    return PlayerData.job.name or ''\nend\nfunction GetGrade()\n    return PlayerData.job.grade or 0\nend\nfunction GetIdentifier()\n    return PlayerData.identifier\nend\nfunction GetRPName()\n    return ('%s %s'):format(PlayerData.firstName, PlayerData.lastName)\nend\nAddEventHandler('onResourceStart', function(resource)\n    if cache.resource == resource then\n        Wait(750)\n        PlayerData = ESX.GetPlayerData()\n        PlayerLoaded = true\n    end\nend)\nif not IsESX() then return end\nESX = exports[Config.FrameworkName]:getSharedObject()\nfunction GetIdentifier(playerId)\n    return ESX.GetPlayerFromId(playerId)?.identifier\nend\nfunction GetName(playerId)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    if xPlayer then\n        return xPlayer.getName()\n    end\n    return 'Unknown'\nend\nfunction GetDNA(playerId)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    if xPlayer then\n        return xPlayer.getName()\n    end\n    return 'Unknown'\nend\nif not IsQBCore() then return end\nlocal QBCore = exports[Config.FrameworkName]:GetCoreObject()\nAddEventHandler(Config.PlayerLoadedEvent.qb, function()\n    PlayerData = QBCore.Functions.GetPlayerData()\n    PlayerLoaded = true\n    Wait(1000)\n    LoadEvidence()\nend)\nRegisterNetEvent('QBCore:Player:SetPlayerData', function(val)\n    PlayerData = val\nend)\nRegisterNetEvent('QBCore:Client:OnJobUpdate', function(JobInfo)\n    PlayerData.job = JobInfo\n    lib.hideTextUI()\nend)\nRegisterNetEvent('QBCore:Client:OnPlayerUnload', function()\n    table.wipe(PlayerData)\n    PlayerLoaded = false\n    RemoveEverything()\nend)\nfunction GetJob()\n    return PlayerData.job.name or ''\nend\nfunction GetGrade()\n    return PlayerData.job.grade.level or 0\nend\nfunction GetIdentifier()\n    return PlayerData.citizenid or ''\nend\nfunction GetRPName()\n    return ('%s %s'):format(PlayerData.charinfo.firstname, PlayerData.charinfo.lastname)\nend\nAddEventHandler('onResourceStart', function(resource)\n    if cache.resource == resource then\n        Wait(500)\n        PlayerData = QBCore.Functions.GetPlayerData()\n        PlayerLoaded = true\n    end\nend)\nif not IsQBCore() then return end\nQBCore = exports[Config.FrameworkName]:GetCoreObject()\nfunction GetIdentifier(playerId)\n    return QBCore.Functions.GetPlayer(playerId)?.PlayerData.citizenid or ''\nend\nfunction GetName(playerId)\n    local ply = QBCore.Functions.GetPlayer(playerId)\n    if ply then\n        return ('%s %s'):format(ply.PlayerData.charinfo.firstname, ply.PlayerData.charinfo.lastname)\n    end\n    return 'Unknown'\nend\nfunction GetDNA(playerId)\n    local ply = QBCore.Functions.GetPlayer(playerId)\n    if ply then\n        return ('%s %s'):format(ply.PlayerData.charinfo.firstname, ply.PlayerData.charinfo.lastname)\n    end\n    return 'Unknown'\nend\nPlayerData = {}\nPlayerLoaded = false\nfunction IsESX()\n    return GetResourceState(\"es_extended\") ~= \"missing\"\nend\nfunction IsQBCore()\n    return GetResourceState(\"qb-core\") ~= \"missing\"\nend\nInv = {}\nlocal oxinv = GetResourceState('ox_inventory'):find('start')\nlocal qsinv = GetResourceState('qs-inventory'):find('start')\nlocal qbinv = GetResourceState('qb-inventory'):find('start')\nlocal psinv = GetResourceState('ps-inventory'):find('start')\nlocal ljinv = GetResourceState('lj-inventory'):find('start')\nlocal core = GetResourceState('core_inventory'):find('start')\nlocal codem = GetResourceState('codem-inventory'):find('start')\nif oxinv then\n    Inv = { ox = true, exp = exports.ox_inventory }\nelseif qsinv then\n    Inv = { qs = true, exp = exports['qs-inventory'] }\nelseif qbinv or psinv or ljinv then\n    Inv = { qb = true }\nelseif core then\n    Inv = { core = true, exp = exports.core_inventory }\nelseif codem then\n    Inv = { codem = true }\nend\nSetTimeout(1000, function()\n    if table.type(Inv) == 'empty' then\n        warn(\"No inventory resource was found, check uniq_evidence/inventory.lua\")\n    end\nend)\nfunction Notify(msg, type)\n    lib.notify({\n        description = msg,\n        type = type,\n        position = 'bottom'\n    })\nend\nRegisterNetEvent('uniq_evidence:Notify', Notify)\n-- callback is in server/editable.lua\nfunction HasItem(item)\n    return lib.callback.await('uniq_evidence:HasItem', 100, item)\nend\nif Inv.ox then\n    Inv.exp:displayMetadata('evidence_caseId', 'Evidence No')\nend\nif Inv.core then\n    function GetCoreInv(source, prefix)\n        local identifier = GetIdentifier(source)\n        if identifier then\n            return IsESX() and ('%s-%s'):format(prefix, identifier:gsub(':','')) or ('%s-%s'):format(prefix, identifier)\n        end\n        return false\n    end\n    lib.callback.register('uniq_evidence:server:GetCurrentWeaponCore', function(source)\n        local inventory = GetCoreInv(source, 'primary')\n        if inventory then\n            local wep = Inv.exp:getInventory(inventory)[1]\n            if wep then\n                return wep\n            end\n        end\n        return false\n    end)\nend\nfunction RegisterUsableItem()\n    if IsESX() then\n        if Config.Features.FingerprintsVehicle then\n            ESX.RegisterUsableItem('uv_flashlight', function(source)\n                TriggerClientEvent('uniq_evidence:CheckFingerprints', source)\n            end)\n            ESX.RegisterUsableItem('tweezers', function(source)\n                TriggerClientEvent('uniq_evidence:CheckForShellsInVeh', source)\n            end)\n            ESX.RegisterUsableItem('cleaning_kit', function(source)\n                TriggerClientEvent('uniq_evidence:DestroyFingerPrintsVeh', source)\n            end)\n        end\n        if Config.Features.ShellsInVehicle then\n            ESX.RegisterUsableItem('cleaning_shells', function(source)\n                TriggerClientEvent('uniq_evidence:CheckShellsVehicle', source)\n            end)\n        end\n    elseif IsQBCore() then\n        if Config.Features.FingerprintsVehicle then\n            QBCore.Functions.CreateUseableItem('uv_flashlight', function(source)\n                TriggerClientEvent('uniq_evidence:CheckFingerprints', source)\n            end)\n            QBCore.Functions.CreateUseableItem('tweezers', function(source)\n                TriggerClientEvent('uniq_evidence:CheckForShellsInVeh', source)\n            end)\n            QBCore.Functions.CreateUseableItem('cleaning_kit', function(source)\n                TriggerClientEvent('uniq_evidence:DestroyFingerPrintsVeh', source)\n            end)\n        end\n        if Config.Features.ShellsInVehicle then\n            QBCore.Functions.CreateUseableItem('cleaning_shells', function(source)\n                TriggerClientEvent('uniq_evidence:CheckShellsVehicle', source)\n            end)\n        end\n    end\nend\nCreateThread(RegisterUsableItem)\nfunction GetWeaponSerial(src, weapon, slot)\n    local serial = L('unknwn')\n    if Inv.ox then\n        local wep = Inv.exp:GetCurrentWeapon(src)\n        if wep and wep.metadata then\n            serial = wep.metadata.serial\n        end\n    elseif Inv.qb then\n        local wep = QBCore.Functions.GetPlayer(src)?.Functions.GetItemByName(QBCore.Shared.Weapons[weapon].name)\n        if wep and wep.info then\n            serial = wep.info.serie\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(src)\n        for k,v in pairs(items) do\n            if v.name == weapon and slot == v.slot then\n                if v.info then\n                    serial = v.info.serie\n                    break\n                end\n            end\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(src, 'primary')\n        if inventory then\n            local wep = Inv.exp:getInventory(inventory)[1]\n            if wep and wep.category == 'weapons' then\n                serial = wep.info.serial\n            end\n        end\n    elseif Inv.codem then\n        if weapon and weapon.info then\n            serial = weapon.info.series\n        end\n    end\n    return serial\nend\nlib.callback.register('uniq_evidence:HasItem', function(source, item)\n    if Inv.ox then\n        local count = Inv.exp:GetItemCount(source, item)\n        return count > 0\n    elseif Inv.qb then\n        return QBCore.Functions.HasItem(source, item, 1)\n    elseif Inv.qs then\n        local itemm = Inv.exp:GetItemByName(source, item)\n        if itemm then\n            return itemm.amount > 0\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        local Item = Inv.exp:getItem(inventory, item)\n        if Item then\n            return Item.count > 0\n        end\n    elseif Inv.codem then\n        local itemm = exports['codem-inventory']:GetItemByName(source, item)\n        if itemm then\n            return tonumber(itemm.amount) > 0\n        end\n    end\nend)\nfunction AddItem(source, item, metadata)\n    if Inv.ox then\n        Inv.exp:AddItem(source, item, 1, metadata)\n    elseif Inv.qb then\n        QBCore.Functions.GetPlayer(source)?.Functions.AddItem(item, 1, nil, metadata)\n    elseif Inv.qs then\n        Inv.exp:AddItem(source, item, 1, nil, metadata)\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        Inv.exp:addItem(inventory, item, 1, metadata, 'content')\n    elseif Inv.codem then\n        exports['codem-inventory']:AddItem(source, item, 1, nil, metadata)\n    end\nend\nfunction RemoveItem(source, item, slot)\n    if Inv.ox then\n        Inv.exp:RemoveItem(source, item, 1, nil, slot)\n    elseif Inv.qb then\n        QBCore.Functions.GetPlayer(source)?.Functions.RemoveItem(item, 1, slot)\n    elseif Inv.qs then\n        Inv.exp:RemoveItem(source, item, 1, slot)\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        local Item = Inv.exp:getInventory(inventory)\n        if Item then\n            for k,v in pairs(Item) do\n                if v.name == item then\n                    Inv.exp:removeItemExact(inventory, v.id, 1)\n                    break\n                end\n            end\n        end\n    elseif Inv.codem then\n        exports['codem-inventory']:RemoveItem(source, item, 1, slot)\n    end\nend\nfunction GetItemSlot(source, item, caseId)\n    if Inv.ox then\n        local items = Inv.exp:Search(source, 'slots', item)\n        if items then\n            for k,v in pairs(items) do\n                if v.metadata.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    elseif Inv.qb then\n        local Player = QBCore.Functions.GetPlayer(source)\n        for k,v in pairs(Player.PlayerData.items) do\n            if v.name == item then\n                if v.info.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(source)\n        for k,v in pairs(items) do\n            if v.name == item then\n                if v.info.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    elseif Inv.core then\n        return 0\n    elseif Inv.codem then\n        for k,v in pairs(exports['codem-inventory']:GetItemsByName(source, item)) do\n            if v.name == item and v.info then\n                if v.info.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    end\nend\nlib.callback.register('uniq_evidence:GetEvidenceByType', function(source, typee)\n    local options = {}\n    if Inv.ox then\n        local items = Inv.exp:GetInventoryItems(source)\n        if items then\n            for k,v in pairs(items) do\n                if v.metadata.evidence_type == typee then\n                    options[#options + 1] = { label = v.metadata.evidence_caseId, value = v.metadata.evidence_caseId }\n                end\n            end\n        end\n    elseif Inv.qb then\n        local Player = QBCore.Functions.GetPlayer(source)\n        for k,v in pairs(Player.PlayerData.items) do\n            if v.info.evidence_type == typee then\n                options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n            end\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(source)\n        for k,v in pairs(items) do\n            if v.info.evidence_type == typee then\n                options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n            end\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        if inventory then\n            local items = Inv.exp:getInventory(inventory)\n            for k, v in pairs(items) do\n                if v.info.evidence_type == typee then\n                    options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n                end\n            end\n        end\n    elseif Inv.codem then\n        local identifier = GetIdentifier(source)\n        local inv = exports['codem-inventory']:GetInventory(identifier, source)\n        if inv then\n            for k,v in pairs(inv) do\n                if v.info?.evidence_type == typee then\n                    options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n                end\n            end\n        end\n    end\n    return options\nend)\nlib.callback.register('uniq_evidence:GetItemMetadata', function(source, type, caseId)\n    if Inv.ox then\n        local items = Inv.exp:GetInventoryItems(source)\n        if items then\n            for k,v in pairs(items) do\n                if v.metadata.evidence_type == type and v.metadata.evidence_caseId == caseId then\n                    return v.metadata\n                end\n            end\n        end\n    elseif Inv.qb then\n        local Player = QBCore.Functions.GetPlayer(source)\n        for k,v in pairs(Player.PlayerData.items) do\n            if v.info.evidence_type == type and v.info.evidence_caseId == caseId then\n                return v.info\n            end\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(source)\n        for k,v in pairs(items) do\n            if v.info.evidence_type == type and v.info.evidence_caseId == caseId then\n                return v.info\n            end\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        if inventory then\n            local items = Inv.exp:getInventory(inventory)\n            for k,v in pairs(items) do\n                if v.info?.evidence_type == type and v.info.evidence_caseId == caseId then\n                    return v.info\n                end\n            end\n        end\n    elseif Inv.codem then\n        local identifier = GetIdentifier(source)\n        local inv = exports['codem-inventory']:GetInventory(identifier, source)\n        if inv then\n            for k,v in pairs(inv) do\n                if v.info?.evidence_type == type and v.info.evidence_caseId == caseId then\n                    return v.info\n                end\n            end\n        end\n    end\n    return {}\nend)\nRegisterNetEvent('uniq_evidence:addBloodMetadata', function(weapon, target)\n    local name = GetName(target)\n    local src = source\n    if name then\n        if Inv.ox then\n            if weapon and weapon.metadata then\n                if not weapon.metadata.dna then\n                    weapon.metadata.dna = {}\n                end\n                if not lib.table.contains(weapon.metadata.dna, name) then\n                    table.insert(weapon.metadata.dna, name)\n                    Inv.exp:SetMetadata(src, weapon.slot, weapon.metadata)\n                    if Config.Notify.blood then\n                        TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                    end\n                end\n            end\n        elseif Inv.qb then\n            if weapon  then\n                local Player = QBCore.Functions.GetPlayer(src)\n                if Player then\n                    local item = Player.Functions.GetItemByName(weapon.name)\n                    if item then\n                        if not item.info.dna then\n                            item.info.dna = {}\n                        end\n                    end\n                    if not lib.table.contains(item.info.dna, name) then\n                        table.insert(item.info.dna, name)\n                        Player.PlayerData.items[item.slot].info = item.info\n                        Player.Functions.SetPlayerData('items', Player.PlayerData.items)\n                        if Config.Notify.blood then\n                            TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                        end\n                    end\n                end\n            end\n        elseif Inv.qs then\n            if weapon and weapon.info then\n                if not weapon.info.dna then\n                    weapon.info.dna = {}\n                end\n                if not lib.table.contains(weapon.info.dna, name) then\n                    table.insert(weapon.info.dna, name)\n                    Inv.exp:SetItemMetadata(src, weapon.slot, weapon.info)\n                    if Config.Notify.blood then\n                        TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                    end\n                end\n            end\n        elseif Inv.core then\n            local inventory = GetCoreInv(src, 'primary')\n            if inventory then\n                local weapon = Inv.exp:getInventory(inventory)\n                if weapon and weapon.category == 'weapons' and weapon.info then\n                    if not weapon.info.dna then\n                        weapon.info.dna = {}\n                    end\n                    if not lib.table.contains(weapon.info.dna, name) then\n                        table.insert(weapon.info.dna, name)\n                        Inv.exp:updateMetadata(inventory, weapon.id, weapon.info)\n                        if Config.Notify.blood then\n                            TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                        end\n                    end\n                end\n            end\n        elseif Inv.codem then\n            if weapon then\n                if not weapon.info.dna then\n                    weapon.info.dna = {}\n                end\n                if not lib.table.contains(weapon.info.dna, name) then\n                    table.insert(weapon.info.dna, name)\n                    exports['codem-inventory']:SetItemMetadata(src, weapon.slot, weapon.info)\n                    if Config.Notify.blood then\n                        TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                    end\n                end\n            end\n        end\n    end\nend)\nRegisterNetEvent('uniq_evidence:server:WeaponFingerprints', function(currentWeapon)\n    local src = source\n    local name = GetName(src)\n    if Inv.ox then\n        local weapon = Inv.exp:Search(src, 'slots', currentWeapon.name)\n        local metadata\n        if weapon then\n            for k,v in pairs(weapon) do\n                if v.metadata.serial == currentWeapon.metadata.serial then\n                    metadata = v.metadata\n                    break\n                end\n            end\n        end\n        if not metadata.fingerprint then\n            metadata.fingerprint = {}\n        end\n        if lib.table.contains(metadata.fingerprint, name) then return end\n        table.insert(metadata.fingerprint, name)\n        Inv.exp:SetMetadata(src, currentWeapon.slot, metadata)\n    elseif Inv.qb then\n        if currentWeapon then\n            local Player = QBCore.Functions.GetPlayer(src)\n            if Player then\n                local item = Player.Functions.GetItemByName(currentWeapon.name)\n                if not item.info.fingerprint then\n                    item.info.fingerprint = {}\n                end\n                if lib.table.contains(item.info.fingerprint, name) then return end\n                table.insert(item.info.fingerprint, name)\n                Player.PlayerData.items[item.slot].info = item.info\n                Player.Functions.SetPlayerData('items', Player.PlayerData.items)\n            end\n        end\n    elseif Inv.qs then\n        if not currentWeapon.info.fingerprint then\n            currentWeapon.info.fingerprint = {}\n        end\n        if lib.table.contains(currentWeapon.info.fingerprint, name) then return end\n        table.insert(currentWeapon.info.fingerprint, name)\n        Inv.exp:SetItemMetadata(src, currentWeapon.slot, currentWeapon.info)\n    elseif Inv.core then\n        local inventory = GetCoreInv(src, 'primary')\n        if inventory then\n            local item = Inv.exp:getInventory(inventory)[1]\n            if item.category == 'weapons' then\n                if not item.info.fingerprint then\n                    item.info.fingerprint = {}\n                end\n                if lib.table.contains(item.info.fingerprint, name) then return end\n                table.insert(item.info.fingerprint, name)\n                Inv.exp:updateMetadata(inventory, item.id, item.info)\n                if Config.Notify.printsweapon then\n                    TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.left_fp'), 'warning')\n                end\n            end\n        end\n    elseif Inv.codem then\n        if currentWeapon then\n            if not currentWeapon.info.fingerprint then\n                currentWeapon.info.fingerprint = {}\n                if lib.table.contains(currentWeapon.info.fingerprint, name) then return end\n                table.insert(currentWeapon.info.fingerprint, name)\n                exports['codem-inventory']:SetItemMetadata(source, currentWeapon.slot, currentWeapon.info)\n            end\n        end\n    end\nend)\nLocales['en'] = {\n    unknwn = 'Unknown',\n    Input = {\n        title = 'Select Evidence',\n        desc = 'Select evidence that you want to analyse'\n    },\n    TextUI = {\n        destroy_shell = '[E] - Destroy shell evidence',\n        collect_shell = '[E] - Collect shell evidence',\n        collect_bullet = '[E] - Collect bullet evidence',\n        destroy_bullet = '[E] - Destroy bullet evidence',\n        collect_blood = '[E] - Collect blood evidence',\n        destroy_blood = '[E] - Destroy blood evidence',\n        a_shell = '[E] - Analyze Shell',\n        a_bullet = '[E] - Analyze Bullet',\n        database = '[E] - Open Evidence Database',\n        a_wep = '[E] - Analyze Weapon',\n        a_blood = '[E] - Analyze Blood',\n        a_veh_fp = '[E] - Analyze Fingerprints from vehicle'\n    },\n    Notify = {\n        no_bag = 'You dont have evidnece bag with you',\n        no_evidence = 'Looks like you dont have evidence with you to anaylse',\n        already_collecting = 'Somebody is already collecting this evidence',\n        cancled = 'You cancled searching',\n        cancled_a = 'You cancled analyzing evidence',\n        only_in_veh = 'You can use this only inside vehicle',\n        wrong = 'Something went wrong',\n        no_match = 'No matches',\n        no_evidence_db = 'No evidence in database',\n        left_fp = 'You left fingerprints on weapon',\n        need_hold_wep = 'You need to hold weapon in hand to scann it, make sure you wear gloves :)',\n        left_fp_veh = 'You left fingerprints in this vehicle',\n        no_veh = 'You are not inside any vehicle',\n        no_fp_found = 'No fingerprint were found in this vehicle',\n        found_fp = 'You found some fingerprints in vehicle',\n        destroyed_fp = 'You have destroyed fingerprints from this vehicle',\n        have_blood = 'You have blood on your weapon',\n        nothing_found = 'Nothing found',\n        cant_find_evidence = 'Can\\'t find evidence on server, server will remove it',\n        found_shell = 'You found bullet shells, there might be more',\n        destoyed_shell = 'You destrosyed bullet shells in this vehicle',\n        deleted = 'You succesfully deleted %s from database',\n        destroyed = 'Evidence Destroyed'\n    },\n    ProgressBar = {\n        blood_collect = 'Collecting blood evidence',\n        searching_shells = 'Searching for bullet shells',\n        analyzing_blood = 'Analyzing Blood...',\n        shell_collet = 'Collecting shell',\n        bullet_collect = 'Collecting bullet',\n        analyzing_evidence = 'Analyzing Evidence...',\n        analyzing_wep = 'Analyzing weapon',\n        searching_fp = 'Searching for fingerprints',\n        destorying = 'Destroying Evidence'\n    },\n    Report = {\n        title = 'Evidence: %s',\n        street = 'Street',\n        date = 'Date',\n        time = 'Time',\n        analyst = 'Anaylist',\n        ammo = 'Ammo Type',\n        location = 'Location',\n        serial = 'Weapon Serial Number',\n        label = 'Label',\n        fp_match = 'Fingerprints on weapon matches next entities',\n        blood_match = 'Blood on weapon matches next entities',\n        blood_match2 = 'Blood matches',\n        delete = 'Delete',\n        a_on = 'Analyzed on',\n        a_at = 'Analyzed at',\n        plate = 'Vehicle Plate',\n        fp_match2 = 'Fingerprints matches next entities',\n        color = 'Vehicle color',\n        archived = 'Archived Evidence',\n        wep_analysis = 'Weapon analysis'\n    },\n    Database = {\n        title = 'Evidence Database',\n        bullet_shell = 'Bullet & Shell Reports',\n        weapons = 'Weapon Reports',\n        blood = 'Blood Reports',\n        veh_fp = 'Vehicle Fingerprint Reports',\n        keyword = 'Keywords: Case ID, Date or Time, Street, Serial Number etc.',\n        search = {\n            title = 'Search',\n            label = 'Search for specific case'\n        }\n    }\n}\nConfig = {\n    Locale = 'en',\n    FrameworkName = IsESX() and 'es_extended' or 'qb-core',\n    PlayerLoadedEvent = {\n        esx = 'esx:playerLoaded',\n        qb = 'QBCore:Client:OnPlayerLoaded'\n    },\n    FlashLightWeapon = `WEAPON_FLASHLIGHT`,\n    -- Evidence will be wiped after remaining unchanged for the given time\n    DeleteEvidenceTime = '6 MONTH',\n    EvidenceDatabase = {\n        {\n            coords = vec3(441.754, -996.019, 30.690),\n            /*\n                table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                string       > groups = 'police'                            > only once job can access, no grade checks\n            */\n            groups = { ['police'] = 1 },\n            Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n        },\n        -- you can add more\n    },\n    Features = {\n        BloodGround = true,             -- Drops blood evidence on the ground upon death.\n        WeaponBlood = true,             -- Leaves blood evidence of the target when hitting somebody with a melee weapon\n        BulletAndShell = true,          -- Leaves bullet shell on the ground while firing a weapon.\n        Bullet = true,                  -- Leaves bullet evidence if bullet hits anything\n        ShellsInVehicle = true,         -- Allows searching for bullets in vehicles.\n        FingerprintsVehicle = true,     -- Leaves fingerprint evidence upon entering a vehicle without wearing gloves.\n        FingerprintsWeapon = true,      -- Leaves fingerprint evidence upon using a weapon without wearing gloves.\n    },\n    /*\n        %d/%m/%Y day/month/year\n        %d-%m-%Y day-month-year\n        %m/%d/%Y month/day/year\n        %m-%d-%Y month-day-year\n        %Y/%d/%m year/day/month\n        %Y-%d-%m year-day-month\n        etc\n    */\n    DateFormat = '%d/%m/%Y', -- day/month/year\n    -- variations that DOESN'T have gloves, might be differnet for you, depending on clothing pack\n    Gloves = {\n        [`mp_m_freemode_01`] = {\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n            11, 12, 13, 14, 15, 18, 26, 52,\n            53, 54, 55, 56, 57, 58, 59, 60,\n            61, 62, 112, 113, 114, 118, 125, 132\n        },\n        [`mp_f_freemode_01`] = {\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n            11, 12, 13, 14, 15, 19, 59, 60, 61,\n            62, 63, 64, 65, 66, 67, 68, 69, 70,\n            71, 129, 130, 131, 135, 142, 149, 153,\n            157, 161, 165\n        },\n        -- this models have gloves by default, you can add them here\n        [`s_m_y_swat_01`] = true,\n        /*\n            [`model_name`] = { variations that doesnt have gloves }\n            if case you use ped that has gloves by default but cant change variations (example s_m_y_swat_01 above),\n            you will do next\n            [`model_name`] = true     \n        */\n    },\n    BulletAndShell = {\n        BulletDestroyable = true,\n        ShellDestroyable = true,\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' },\n        -- for how long it will collect evidence, 5000ms = 5 sec\n        CollectingTime = 5000,\n        \n        -- for how long it will analyze evidence, 5000ms = 5 sec\n        AnalyzingTime = 5000,\n        -- for how long it will analyze weapon, 10000ms = 10 sec\n        AnalyzingWeaponTime = 5000,\n        -- jobs that dont leave bullet evidence on ground when shooting\n        NoBulletEvidenceJob = {\n            ['police'] = true,\n            -- you can add more\n        },\n        -- weapons that should not leave bullet evidence when shooting\n        BlacklistWeapons = {\n            [`weapon_stungun`] = true,\n            -- you can add more\n        },\n        Shell = { type = 2, scaleX = 0.1, scaleY = 0.05, scaleZ = 0.07, r = 188, g = 159, b = 96 },\n        Bullet = { type = 2, scaleX = 0.1, scaleY = 0.05, scaleZ = 0.07, r = 182, g = 122, b = 94 },\n        -- time in minutes before evidence disappears\n        RemoveTime = 25,\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        -- you can add as many as you want\n        Scanner = {\n            {\n                type = 'shell', -- scanner for shells or bullet\n                coords = vec3(441.882, -991.446, 30.690),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            {\n                type = 'bullet',\n                coords = vec3(437.030, -990.831, 30.690),\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        EvidenceReport = {\n            date = true,            -- date when evidence was created\n            time = true,            -- time when evidence was created\n            street = true,          -- street address where evidence was created\n            ammolabel = true,       -- type of weapon it was fired from, AmmoLabels\n            weaponSerial = true,    -- serial number of weapon it was fired from, kinda op?\n            analyst = true,         -- name of player who analysed evidence\n            color = true,           -- color of vehicle (if bullet was taken out from vehicle)\n            plate = true,           -- plate of vehicle where shell was taken from   \n        }\n    },\n    Weapon = {\n        Scanner = {\n            {\n                coords = vec3(437.693, -994.525, 30.690),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        EvidenceReport = {\n            date = true,            -- date when evidence was scanned\n            weaponLabel = true,     -- label of weapon\n            time = true,            -- time when evidence was scanned\n            ammolabel = true,       -- type of weapon it was fired from, AmmoLabels\n            weaponSerial = true,    -- serial number of weapon\n            analyst = true,         -- name of player who analysed evidence\n            fingerprint = true,     -- fingerprints of last person who used gun (if not wearing gloves)\n            dna = true,             -- DNA of victim\n        }\n    },\n    Blood = {\n        EvidenceDestroyable = true,\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' },\n        -- if ranining, remove evidence?\n        RemoveEvidenceOnRain = true,\n        -- time in minutes before evidence disappears\n        RemoveTime = 25,\n        -- for how long it will collect evidence, 5000ms = 5 sec\n        CollectingTime = 5000,\n        -- for how long it will analyze evidence, 5000ms = 5 sec\n        AnalyzingTime = 5000,\n        -- blood on ground marker\n        Evidence = { type = 2, scaleX = 0.1, scaleY = 0.05, scaleZ = 0.07, r = 255, g = 0, b = 0 },\n        Scanner = {\n            {\n                coords = vec3(439.117, -993.290, 30.690),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        EvidenceReport = {\n            street = true,          -- street where blood was found\n            date = true,            -- date when evidence was scanned\n            time = true,            -- time when evidence was scanned\n            analyst = true,         -- name of player who analysed evidence\n            dna = true,             -- DNA of victim\n        },\n    },\n    FingerprintsVehicle = {\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' } ,\n        -- here you can whitelist vehicles in which you do not want to leave fingerprints\n        WhitelistModels = { `xyz`, },\n        -- here you can whitelist plates \n        WhiteListPlates = { 'xyz', },\n        WhitelistJobs = {\n            -- xyz and grade 2 and above wont leave fingerprints\n            ['xyz'] = 2\n        },\n        -- here you can add your identifier or citizenid\n        WhitelistIdentifiers = {\n            'char1:xyz',\n        },\n        -- time in msec for searching fingerprints in vehicle\n        FingerSearching = 2000,\n        Scanner = {\n            {\n                coords = vec3(461.881, -989.336, 24.915),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        EvidenceReport = {\n            street = true,          -- street where fingerprints were found\n            date = true,            -- date when evidence was taken\n            time = true,            -- time when evidence was taken\n            analyst = true,         -- name of player who analysed evidence\n            plate = true,           -- vehicle plates\n            color = true,           -- vehicle color\n        }\n    },\n    ShellsInVehicle = {\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' },\n        -- jobs that wont leave shell evidence in vehicle\n        NoShell = {\n            ['police'] = true\n        },\n        -- weapons that should not leave shell evidence when shooting\n        BlacklistWeapons = {\n            [`weapon_stungun`] = true\n        },\n        -- duration for searching for shells in vehicle\n        SearchingDuration = 2000,\n    },\n    Notify = {\n        blood = true,           -- notify player that he have blood on weapon after hitting somebody\n        printsweapon = true,    -- notify player that he left fingerprints on weapon\n        printsvehicle = true,   -- notify player that he left fingerprints in vehicle\n    },\n    AmmoLabels = {\n        [`WEAPON_ADVANCEDRIFLE`] = '5.56x45',\n        [`WEAPON_APPISTOL`] = '9mm',\n        [`WEAPON_ASSAULTRIFLE`] = '7.62x39',\n        [`WEAPON_ASSAULTRIFLE_MK2`] = '7.62x39',\n        [`WEAPON_ASSAULTSHOTGUN`] = '12 Gauge',\n        [`WEAPON_ASSAULTSMG`] = '5.56x45',\n        [`WEAPON_AUTOSHOTGUN`] = '12 Gauge',\n        [`WEAPON_BULLPUPRIFLE`] = '5.56x45',\n        [`WEAPON_BULLPUPRIFLE_MK2`] = '5.56x45',\n        [`WEAPON_BULLPUPSHOTGUN`] = '12 Gauge',\n        [`WEAPON_CARBINERIFLE`] = '5.56x45',\n        [`WEAPON_CARBINERIFLE_MK2`] = '5.56x45',\n        [`WEAPON_CERAMICPISTOL`] = '9mm',\n        [`WEAPON_COMBATMG`] = '5.56x45',\n        [`WEAPON_COMBATMG_MK2`] = '7.62x39',\n        [`WEAPON_COMBATPDW`] = '9mm',\n        [`WEAPON_COMBATPISTOL`] = '9mm',\n        [`WEAPON_COMBATSHOTGUN`] = '12 Gauge',\n        [`WEAPON_COMPACTLAUNCHER`] = '40mm Explosive',\n        [`WEAPON_COMPACTRIFLE`] = '7.62x39',\n        [`WEAPON_DBSHOTGUN`] = '12 Gauge',\n        [`WEAPON_DOUBLEACTION`] = '.38 LC',\n        [`WEAPON_EMPLAUNCHER`] = 'EMP round',\n        [`WEAPON_FIREWORK`] = 'Firework',\n        [`WEAPON_FLAREGUN`] = 'Flare round',\n        [`WEAPON_GADGETPISTOL`] = '9mm',\n        [`WEAPON_GRENADELAUNCHER`] = '40mm Explosive',\n        [`WEAPON_GUSENBERG`] = '.45 ACP',\n        [`WEAPON_HEAVYPISTOL`] = '.45 ACP',\n        [`WEAPON_HEAVYRIFLE`] = '5.56x45',\n        [`WEAPON_HEAVYSHOTGUN`] = '12 Gauge',\n        [`WEAPON_HEAVYSNIPER`] = '.50 BMG',\n        [`WEAPON_HEAVYSNIPER_MK2`] = '.50 BMG',\n        [`WEAPON_HOMINGLAUNCHER`] = 'Rocket',\n        [`WEAPON_MACHINEPISTOL`] = '9mm',\n        [`WEAPON_MARKSMANPISTOL`] = '.22 Long Rifle',\n        [`WEAPON_MARKSMANRIFLE`] = '7.62x51',\n        [`WEAPON_MARKSMANRIFLE_MK2`] = '7.62x51',\n        [`WEAPON_MG`] = '7.62x39',\n        [`WEAPON_MICROSMG`] = '.45 ACP',\n        [`WEAPON_MILITARYRIFLE`] = '5.56x45',\n        [`WEAPON_MINIGUN`] = '7.62x39',\n        [`WEAPON_MINISMG`] = '9mm',\n        [`WEAPON_MUSKET`] = '.50 Ball',\n        [`WEAPON_NAVYREVOLVER`] = '.44 Magnum',\n        [`WEAPON_PISTOL`] = '9mm',\n        [`WEAPON_PISTOL50`] = '.50 AE',\n        [`WEAPON_PISTOLXM3`] = '9mm',\n        [`WEAPON_PISTOL_MK2`] = '9mm',\n        [`WEAPON_PRECISIONRIFLE`] = '7.62x51',\n        [`WEAPON_PUMPSHOTGUN`] = '12 Gauge',\n        [`WEAPON_PUMPSHOTGUN_MK2`] = '12 Gauge',\n        [`WEAPON_RAILGUN`] = 'Railgun charge',\n        [`WEAPON_RAILGUNXM3`] = 'Railgun charge',\n        [`WEAPON_RAYCARBINE`] = 'Laser charge',\n        [`WEAPON_RAYMINIGUN`] = 'Laser charge',\n        [`WEAPON_REVOLVER`] = '.44 Magnum',\n        [`WEAPON_REVOLVER_MK2`] = '.44 Magnum',\n        [`WEAPON_RPG`] = 'Rocket',\n        [`WEAPON_SAWNOFFSHOTGUN`] = '12 Gauge',\n        [`WEAPON_SMG`] = '9mm',\n        [`WEAPON_SMG_MK2`] = '9mm',\n        [`WEAPON_SNIPERRIFLE`] = '7.62x51',\n        [`WEAPON_SNSPISTOL`] = '.45 ACP',\n        [`WEAPON_SNSPISTOL_MK2`] = '.45 ACP',\n        [`WEAPON_SPECIALCARBINE`] = '5.56x45',\n        [`WEAPON_SPECIALCARBINE_MK2`] = '5.56x45',\n        [`WEAPON_TACTICALRIFLE`] = '5.56x45',\n        [`WEAPON_TECPISTOL`] = '9mm',\n        [`WEAPON_VINTAGEPISTOL`] = '9mm',\n    }\n}"}},"/paid/evidence/api":{"title":"Client","data":{"opencasebyid#OpenCaseByID":"Allowing you to open case via ID in external resources (e.g. MDT).\nexports.uniq_evidence:OpenCaseByID('caseID')"}},"/paid/evidence/features":{"title":"Features","data":{"bullet-shell-evidence#Bullet Shell Evidence":"Can be disabled\nConfigurable groups which can collect evidence\nConfigurable groups that won't leave evidence\nConfigurable weapons that won't leave evidence\nShooting from vehicle will leave evidence in that vehicle\nConfigurable evidence disappearing time\nConfigurable marker type, colour and scale","bullet-evidence#Bullet Evidence":"Can be disabled\nBullet needs to hit something in order to be left as evidence\nLong distances supported\nConfigurable evidence disappearing time\nConfigurable marker type, colour and scale","blood-evidence#Blood Evidence":"Killing player will leave evidence behind\nConfigurable groups which can collect evidence\nConfigurable evidence disappearing time\nConfigurable evidence disappearing on rain (it won't disappear in interior or under bridge or something like that)\nConfigurable marker type, colour and scale","blood-on-weapon#Blood On Weapon":"Hitting player (close combat) will leave player's DNA on weapon","weapon-fingerprints#Weapon Fingerprints":"Not wearing gloves will leave evidence on that weapon\nConfigurable non-gloves variations per ped model\nConfigurable ped models that have gloves by default","vehicle-fingerprints#Vehicle Fingerprints":"Not wearing gloves upon entering vehicle will leave evidence behind\nConfigurable groups which can collect evidence\nConfigurable vehicle models in which evidence won't be left\nConfigurable vehicle plates where evidence won't be left\nConfigurable identifiers that won't leave evidence","evidence-scanner#Evidence Scanner":"Possible to add as many as you want\nConfigurable groups for each scanner which can scan","evidence-report#Evidence Report":"Configurable for each evidence type what will be shown in report:\nDate\nTime\nStreet\nAmmo label (if exists)\nWeapon serial (if exists)\nVehicle colour (if exists)\nVehicle plate (if exists)\nDNA owner (if exists)\nFingerprints (if exists)\nAnalyst (if exists)","evidence-database#Evidence Database":"Separated in 4 categories:\nBullet & Shell Reports\nWeapon Reports\nBlood Reports\nVehicle Fingerprints Reports\nConfigurable delete evidence time\nSearchable menu (keywords: date, time, street, serial number, ammo label, plate etc.)"}},"/escrow":{"title":"FiveM asset escrow errors","data":{"you-lack-the-required-entitlement-to-use-x#You lack the required entitlement to use X":"Make sure that your server's license key is owned by the same Portal account that owns the asset. If it is on the same account, restart your server. If not, transfer the asset to the same account as your server's license key. Please note that you can only transfer assets once.","failed-to-verify-protected-resource-x#Failed to verify protected resource X":"This error means that files were corrupted during the download. Most times this happens because you use FileZilla, which doesn't work well with encrypted files. Try using WinSCP instead.","error-parsing-script-y-in-resource-x-y-syntax-error-near-1#Error parsing script @Y in resource X: @Y: syntax error near <\\1>":"This error means that your server artifacts are outdated. Update to the latest recommended version."}},"/paid/crypto/install":{"title":"Installation","data":{"":"Installation guide for Object Creator","install-mariadb#Install MariaDB":"Do not use XAMPP\nInstall the latest stable version of MariaDB, if you don't have it already.","sql-file#SQL file":"Do not use phpMyAdmin\nThe SQL code should install automatically. However, if it doesn't, you can manually run the following code using HeidiSQL.\n  CREATE TABLE IF NOT EXISTS `mh_crypto` (\n      `name` varchar(50) DEFAULT NULL,\n      `data` longtext DEFAULT NULL\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;","install-dependecies#Install Dependecies":"Download and install the following dependencies:\noxmysql\nox_lib\nup-to-date server artifacts\nDownload dependencies and add them to your resources folder.","add-to-servercfg#Add to server.cfg":"Find your resources folder, inside create a new folder named [modhaven] if one doesnâ€™t already exist, download asset from Portal and move into [modhaven], and add ensure [modhaven] at the end of your server.cfg file. Make sure that all dependencies listed above are started before our asset."}},"/paid/evidence/install":{"title":"Installation","data":{"":"Installation guide for Object Creator","install-mariadb#Install MariaDB":"Do not use XAMPP\nInstall the latest stable version of MariaDB, if you don't have it already.","sql-file#SQL file":"Do not use phpMyAdmin\nThe SQL code should install automatically. However, if it doesn't, you can manually run the following code using HeidiSQL.\nCREATE TABLE IF NOT EXISTS `uniq_evidence` (\n  `caseId` varchar(50) DEFAULT NULL,\n  `type` varchar(50) DEFAULT NULL,\n  `data` longtext DEFAULT NULL,\n  `time` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;","install-dependecies#Install Dependecies":"Download and install the following dependencies:\noxmysql\nox_lib\nup-to-date server artifacts\nDownload dependencies and add them to your resources folder.","adding-items#Adding Items":"In ox_inventory/data/items.lua add following:\n['empty_evidence_bag'] = {\n    label = 'Empty Evidence Bag',\n    stack = true,\n    close = false,\n    weight = 50\n},\n['bullet_shell_evidence'] = {\n    label = 'Bullet Shell Evidence',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['bullet_evidence'] = {\n    label = 'Bullet Evidence',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['blood_evidence'] = {\n    label = 'Blood Evidence',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['uv_flashlight'] = {\n    label = 'UV Flashlight',\n    stack = false,\n    close = true,\n    weight = 850\n},\n['vehicle_prints_evidence'] = {\n    label = 'Vehicle Fingerprints Evidnece',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['tweezers'] = {\n    label = 'Tweezers',\n    stack = true,\n    close = true,\n    weight = 15\n},\n['cleaning_kit'] = {\n  label = 'Cleaning Kit',\n  stack = true,\n  close = true,\n  weight = 450\n},\n['cleaning_shells'] = {\n  label = 'Cleaning Kit',\n  stack = true,\n  close = true,\n  weight = 450\n},\nExecute following SQL:\nINSERT INTO `items` (`name`, `label`, `weight`, `rare`, `can_remove`, `x`, `y`, `category`, `componentTint`, `componentHash`, `backpackModel`, `backgroundTexture`, `description`) VALUES\n  ('empty_evidence_bag', 'Empty Evidence Bag', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('bullet_shell_evidence', 'Bullet Shell Evidence', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('bullet_evidence', 'Bullet Evidence', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('blood_evidence', 'Blood Evidence', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('uv_flashlight', 'UV Flashlight', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('tweezers', 'Tweezers', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('vehicle_prints_evidence', 'Vehicle Fingerprints Evidnece', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('cleaning_kit', 'Cleaning Kit', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('cleaning_shells', 'Cleaning Kit', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, '');\nIn qb-core/shared/items.lua add following:\nempty_evidence_bag           = { name = 'empty_evidence_bag', label = 'Empty Evidence Bag', weight = 0, type = 'item', image = 'empty_evidence_bag.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_shell_evidence        = { name = 'bullet_shell_evidence', label = 'Bullet Shell Evidence', weight = 0, type = 'item', image = 'bullet_shell_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_evidence              = { name = 'bullet_evidence', label = 'Bullet Evidence', weight = 0, type = 'item', image = 'bullet_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nblood_evidence               = { name = 'blood_evidence', label = 'Blood Evidence', weight = 0, type = 'item', image = 'blood_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nuv_flashlight                = { name = 'uv_flashlight', label = 'UV Flashlight', weight = 0, type = 'item', image = 'uv_flashlight.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ntweezers                     = { name = 'tweezers', label = 'Tweezers', weight = 0, type = 'item', image = 'tweezers.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\nvehicle_prints_evidence      = { name = 'vehicle_prints_evidence', label = 'Vehicle Fingerprints Evidnece', weight = 0, type = 'item', image = 'vehicle_prints_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\ncleaning_kit                 = { name = 'cleaning_kit', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_kit.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ncleaning_shells              = { name = 'cleaning_shells', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_shells.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\nIn qs-inventory/shared/items.lua add following:\n['empty_evidence_bag']           = {\n  ['name'] = 'empty_evidence_bag',\n  ['label'] = 'Empty Evidence Bag',\n  ['weight'] = 0,\n  ['type'] = 'item',\n  ['image'] = 'empty_evidence_bag.png',\n  ['unique'] = false,\n  ['useable'] = false,\n  ['shouldClose'] = false,\n  ['combinable'] = nil,\n  ['description'] = 'Used a lot to keep DNA from blood, bullet shells and more'\n},\n['bullet_shell_evidence']           = {\n    ['name'] = 'bullet_shell_evidence',\n    ['label'] = 'Bullet Shell Evidence',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'bullet_shell_evidence.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['bullet_evidence']           = {\n    ['name'] = 'bullet_evidence',\n    ['label'] = 'Bullet Evidence',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'bullet_evidence.png',\n    ['unique'] = true,\n    ['useable'] = false,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['blood_evidence']           = {\n    ['name'] = 'blood_evidence',\n    ['label'] = 'Blood Evidence',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'blood_evidence.png',\n    ['unique'] = true,\n    ['useable'] = false,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['uv_flashlight']           = {\n    ['name'] = 'uv_flashlight',\n    ['label'] = 'UV Flashlight',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'uv_flashlight.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['tweezers']           = {\n    ['name'] = 'tweezers',\n    ['label'] = 'Tweezers',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'tweezers.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['vehicle_prints_evidence']           = {\n    ['name'] = 'vehicle_prints_evidence',\n    ['label'] = 'Vehicle Fingerprints Evidnece',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'vehicle_prints_evidence.png',\n    ['unique'] = true,\n    ['useable'] = false,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['cleaning_kit']           = {\n    ['name'] = 'cleaning_kit',\n    ['label'] = 'Cleaning Kit',\n    ['weight'] = 450,\n    ['type'] = 'item',\n    ['image'] = 'cleaning_kit.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['cleaning_shells']           = {\n    ['name'] = 'cleaning_shells',\n    ['label'] = 'Cleaning Kit',\n    ['weight'] = 450,\n    ['type'] = 'item',\n    ['image'] = 'cleaning_shells.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\nIn codem-inventory/config/itemlist.lua add following:\nempty_evidence_bag           = { name = 'empty_evidence_bag', label = 'Empty Evidence Bag', weight = 0, type = 'item', image = 'empty_evidence_bag.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_shell_evidence        = { name = 'bullet_shell_evidence', label = 'Bullet Shell Evidence', weight = 0, type = 'item', image = 'bullet_shell_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_evidence              = { name = 'bullet_evidence', label = 'Bullet Evidence', weight = 0, type = 'item', image = 'bullet_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nblood_evidence               = { name = 'blood_evidence', label = 'Blood Evidence', weight = 0, type = 'item', image = 'blood_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nuv_flashlight                = { name = 'uv_flashlight', label = 'UV Flashlight', weight = 0, type = 'item', image = 'uv_flashlight.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ntweezers                     = { name = 'tweezers', label = 'Tweezers', weight = 0, type = 'item', image = 'tweezers.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\nvehicle_prints_evidence      = { name = 'vehicle_prints_evidence', label = 'Vehicle Fingerprints Evidnece', weight = 0, type = 'item', image = 'vehicle_prints_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\ncleaning_kit                 = { name = 'cleaning_kit', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_kit.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ncleaning_shells              = { name = 'cleaning_shells', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_shells.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },","add-to-servercfg#Add to server.cfg":"Find your resources folder, inside create a new folder named [modhaven] if one doesnâ€™t already exist, move the asset from keymaster/portal into [uniq], and add ensure [uniq] at the end of your server.cfg file. Make sure that all dependencies listed above are started before our asset."}}}