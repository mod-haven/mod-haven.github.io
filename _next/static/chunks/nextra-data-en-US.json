{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/faq":{"title":"Frequently Asked Questions","data":{"":"How do I get my roles on Discord?\nObtaining roles is very simple, on our community Discord we have a channel called  ðŸ”‘ï¸±claim-role , which allows you to claim roles using the Tebex bot.\nWhere should I look for support?\nAs a new customer with a Customer role, you'll find a dedicated section named 'Customer Area' on our Discord server.\nThe  ðŸŽ«ï¸±script-support  channel serves as the exclusive support hub for our resources,\nwhere customers should seek assistance. If you can't access the  ðŸŽ«ï¸±script-support  channel, please open a ticket in the\n ðŸŽ«ï¸±general-support  channel and provide your transaction ID.\nI can't find my transaction id\nYou can find your transaction id at https://checkout.tebex.io/payment-history/login\nHow do I download and install the digital products I purchase?\nAfter purchase your product(s) will be available on your Portal account instantly!\nIs it possible to get a refund?\nA refund can only be processed if the conditions outlined in our refund policy are met. Please refer to our refund policy at: https://www.uniq-scripts.com/refund-policy.\nCan I transfer or give away my scripts?\nYes, from your Portal account you have the option to transfer one time to another person. You also have the option to buy as a gift from our website!\nI would like to cancel my subscription\nYou can manage your subscription at https://checkout.tebex.io/payment-history/login\nWhen checking out, it says \"payment declined\"\nIf your payment got declined there is nothing we can do. It usually fixes itself if you try later, or it might mean you have been banned from Tebex. Try using another payment method, credit card or device.\nI have XAMPP, how can I install MariaDB?\nFollow this video for a guide on how to switch to MariaDB: https://www.youtube.com/watch?v=bigFDwM8YCA"}},"/free":{"title":"Free Assets","data":{"":"Here you can find documentation for our free assets!"}},"/free/garages":{"title":"Advanced Garage System","data":{}},"/free/garages/about":{"title":"About","data":{"compatible-frameworks#Compatible Frameworks":"ESX\nQB Core\nQBOX","features#Features":"Ownable Garages\nGarages are ownable properties\nGarage & Impound types\ncar, air, boat\nCapacity\nSlot based garages\nFloor system\nEach garage can have unlimited numbers of floors\nCustomization\nAccess to interior upgrades, each floor can have different customizations\nOptimized & secured\nInvite Player\nInvite your friends in your garage, optional\nOneSync: Infinity support"}},"/free/garages/entitysets":{"title":"Entitysets","data":{}},"/free/garages/garage":{"title":"Garage","data":{"":"All garages are defined in a file using key-value pairs. The key represents the garage's label, which is used throughout the script and database, while the value is a table containing the garage's options.\nGarage options: table\ntype: string\n'car', 'air', 'boat' - whatever you want\nenter: vector3\nCoords of enter position\nparkVehicle: vector3\nCoords for parking vehicle in garage\nvehicleSpawnPoint: vector4\nSpawn point of vehicle\nprice: number\nPrice of garage\nblip: table\nBlip table contains:\nid\ncolour\nscale\nblackListClass: table\nClasses that are blacklisted for this garage, check list of all vehicles here, table must be array\nGarageInfo: string\nSome general info about garage for players\ninterior: string\nInterior from config/interior.lua\nYou can check some predefined garages in config/garages.lua"}},"/free/garages/interior":{"title":"Interior","data":{"":"All the interiors are defined in a file using key-value pairs. The key represents the name of the interior, and the value is a table containing the options for that interior. Later, the key from that table will be used in the garage to determine which interior the garage will use.\nInterior options: table\ninteriorId: number\nId of interior, you can use native GetInteriorAtCoords or CodeWalker to find it\nipl?: string\nOptional, some interiors doesn't have it\ninsideSpawn: vector4\nLocation where player will be spawned inside interior\ncustomizationMenu?: vector3\nOptional, if your interior doesn't have options to customize, you dont put this\nVehicles: table\nThe Vehicles table consists of numbered sub-tables, where each number represents a specific floor. Inside each floor, there are multiple sets of coordinates (vector4) where vehicles will spawn\nVehicles = {\n    [1] = { -- This represents floor 1\n        vec4(0, 0, 0, 0),\n        vec4(0, 0, 0, 0),\n    },\n    [2] = { -- This represents floor 2\n        vec4(0, 0, 0, 0),\n    }\n}\nCustomization: table\nThe Default table defines the initial settings that are applied when a garage is purchased\nEach number ([1], [2], etc.) represents a floor (similar to the Vehicles table)\nEach entry inside a floor is a configuration setting.\nEach setting must have:\nname: string- A name of entity set.\ntype: string - Specifies the category of the setting (e.g., tint, blinds), naming doesn't matter.\ncolor: number- (Optional) - Only included if applicable.\nDefault = {\n    [1] = {\n        { name = 'entity_set_shell_01', type = 'interior' },\n        { name = 'entity_set_shell_02' }, -- static, wont change\n        { name = 'entity_set_shell_03', type = 'tint', color = 1 },\n    }\n},\nPurchasable: table\nEach item belongs to a category, and the category name (key) will be displayed as a title in the menu.\nEvery item in the table must contain:\nlabel - The name of the item that will be shown in the menu.\nname - The internal name (entity set) used by the script to apply changes.\nprice - The cost of the item.\ntype - The type of the item (e.g., interior, tint, etc.).\ncolor - (optional) - A numerical value representing the item's color (if applicable)\nDeactivateInterior?: function\nFunction that will unload interior\nLoadDefaults?: function\nFunction that will load interior for preview, make sure that Default table have same logic as this because when you purchase garage it will set data from Default table\nYou can check some predefined interiors in config/interior.lua"}},"/":{"title":"Documentation for ModHaven Scripts","data":{"":"Welcome to the documentation for ModHaven Scripts. Here you can find information on how to install, configure, use and troubleshoot our resources.If you need help with any of our resources, you can ask in the\n ðŸŽ«ï¸±support  channel in our Discord server."}},"/paid":{"title":"Paid Assets","data":{"":"Here you can find documentation for our paid assets!"}},"/paid/crypto":{"title":"Crpyto Miners","data":{}},"/paid/crypto/about":{"title":"About Asset","data":{}},"/paid/crypto/accessiable":{"title":"Accessible code","data":{}},"/paid/evidence":{"title":"Evidence System","data":{"":"System that allows your players to test shooting skills against each other."}},"/paid/evidence/about":{"title":"About Asset","data":{"compatible-frameworks#Compatible Frameworks":"ESX\nQB Core\nQBOX","compatible-inventories#Compatible Inventories":"ox_inventory\nqs-inventory\nqb-inventory\nps-inventory\nlj-inventory\ncodem-inventory\ncore_inventory\nYou can add your own inventory if it supports metadata on items.","features#Features":"Bullet Shell Evidence\nCan be disabled\nConfigurable groups which can collect evidence\nConfigurable groups that won't leave evidence\nConfigurable weapons that won't leave evidence\nShooting from vehicle will leave evidence in that vehicle\nConfigurable evidence disappearing time\nConfigurable marker type, colour and scale\nBullet Evidence\nCan be disabled\nBullet needs to hit something in order to be left as evidence\nLong distances supported\nConfigurable evidence disappearing time\nConfigurable marker type, colour and scale\nBlood Evidence\nKilling player will leave evidence behind\nConfigurable groups which can collect evidence\nConfigurable evidence disappearing time\nConfigurable evidence disappearing on rain (it won't disappear in interior or under bridge or something like that)\nConfigurable marker type, colour and scale\nBlood On Weapon\nHitting player (close combat) will leave player's DNA on weapon\nWeapon Fingerprints\nNot wearing gloves will leave evidence on that weapon\nConfigurable non-gloves variations per ped model\nConfigurable ped models that have gloves by default\nVehicle Fingerprints\nNot wearing gloves upon entering vehicle will leave evidence behind\nConfigurable groups which can collect evidence\nConfigurable vehicle models in which evidence won't be left\nConfigurable vehicle plates where evidence won't be left\nConfigurable identifiers that won't leave evidence\nEvidence Scanner\nPossible to add as many as you want\nConfigurable groups for each scanner which can scan\nEvidence Report\nConfigurable for each evidence type what will be shown in report:\nDate\nTime\nStreet\nAmmo label (if exists)\nWeapon serial (if exists)\nVehicle colour (if exists)\nVehicle plate (if exists)\nDNA owner (if exists)\nFingerprints (if exists)\nAnalyst (if exists)\nEvidence Database\nSeparated in 4 categories:\nBullet & Shell Reports\nWeapon Reports\nBlood Reports\nVehicle Fingerprints Reports\nConfigurable delete evidence time\nSearchable menu (keywords: date, time, street, serial number, ammo label, plate etc.)"}},"/paid/evidence/accessiable":{"title":"Accessible code","data":{"":"if not IsESX() then return end\nlocal ESX = exports[Config.FrameworkName]:getSharedObject()\nRegisterNetEvent(Config.PlayerLoadedEvent.esx)\nAddEventHandler(Config.PlayerLoadedEvent.esx, function(xPlayer)\n    PlayerData = xPlayer\n    PlayerLoaded = true\n    Wait(1000)\n    LoadEvidence()\nend)\nRegisterNetEvent('esx:setJob')\nAddEventHandler('esx:setJob', function(job)\n    PlayerData.job = job\n    lib.hideTextUI()\nend)\nRegisterNetEvent('esx:onPlayerLogout', function()\n    table.wipe(PlayerData)\n    PlayerLoaded = false\n    RemoveEverything()\nend)\nfunction GetJob()\n    return PlayerData.job.name or ''\nend\nfunction GetGrade()\n    return PlayerData.job.grade or 0\nend\nfunction GetIdentifier()\n    return PlayerData.identifier\nend\nfunction GetRPName()\n    return ('%s %s'):format(PlayerData.firstName, PlayerData.lastName)\nend\nAddEventHandler('onResourceStart', function(resource)\n    if cache.resource == resource then\n        Wait(750)\n        PlayerData = ESX.GetPlayerData()\n        PlayerLoaded = true\n    end\nend)\nif not IsESX() then return end\nESX = exports[Config.FrameworkName]:getSharedObject()\nfunction GetIdentifier(playerId)\n    return ESX.GetPlayerFromId(playerId)?.identifier\nend\nfunction GetName(playerId)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    if xPlayer then\n        return xPlayer.getName()\n    end\n    return 'Unknown'\nend\nfunction GetDNA(playerId)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    if xPlayer then\n        return xPlayer.getName()\n    end\n    return 'Unknown'\nend\nif not IsQBCore() then return end\nlocal QBCore = exports[Config.FrameworkName]:GetCoreObject()\nAddEventHandler(Config.PlayerLoadedEvent.qb, function()\n    PlayerData = QBCore.Functions.GetPlayerData()\n    PlayerLoaded = true\n    Wait(1000)\n    LoadEvidence()\nend)\nRegisterNetEvent('QBCore:Player:SetPlayerData', function(val)\n    PlayerData = val\nend)\nRegisterNetEvent('QBCore:Client:OnJobUpdate', function(JobInfo)\n    PlayerData.job = JobInfo\n    lib.hideTextUI()\nend)\nRegisterNetEvent('QBCore:Client:OnPlayerUnload', function()\n    table.wipe(PlayerData)\n    PlayerLoaded = false\n    RemoveEverything()\nend)\nfunction GetJob()\n    return PlayerData.job.name or ''\nend\nfunction GetGrade()\n    return PlayerData.job.grade.level or 0\nend\nfunction GetIdentifier()\n    return PlayerData.citizenid or ''\nend\nfunction GetRPName()\n    return ('%s %s'):format(PlayerData.charinfo.firstname, PlayerData.charinfo.lastname)\nend\nAddEventHandler('onResourceStart', function(resource)\n    if cache.resource == resource then\n        Wait(500)\n        PlayerData = QBCore.Functions.GetPlayerData()\n        PlayerLoaded = true\n    end\nend)\nif not IsQBCore() then return end\nQBCore = exports[Config.FrameworkName]:GetCoreObject()\nfunction GetIdentifier(playerId)\n    return QBCore.Functions.GetPlayer(playerId)?.PlayerData.citizenid or ''\nend\nfunction GetName(playerId)\n    local ply = QBCore.Functions.GetPlayer(playerId)\n    if ply then\n        return ('%s %s'):format(ply.PlayerData.charinfo.firstname, ply.PlayerData.charinfo.lastname)\n    end\n    return 'Unknown'\nend\nfunction GetDNA(playerId)\n    local ply = QBCore.Functions.GetPlayer(playerId)\n    if ply then\n        return ('%s %s'):format(ply.PlayerData.charinfo.firstname, ply.PlayerData.charinfo.lastname)\n    end\n    return 'Unknown'\nend\nPlayerData = {}\nPlayerLoaded = false\nfunction IsESX()\n    return GetResourceState(\"es_extended\") ~= \"missing\"\nend\nfunction IsQBCore()\n    return GetResourceState(\"qb-core\") ~= \"missing\"\nend\nInv = {}\nlocal oxinv = GetResourceState('ox_inventory'):find('start')\nlocal qsinv = GetResourceState('qs-inventory'):find('start')\nlocal qbinv = GetResourceState('qb-inventory'):find('start')\nlocal psinv = GetResourceState('ps-inventory'):find('start')\nlocal ljinv = GetResourceState('lj-inventory'):find('start')\nlocal core = GetResourceState('core_inventory'):find('start')\nlocal codem = GetResourceState('codem-inventory'):find('start')\nif oxinv then\n    Inv = { ox = true, exp = exports.ox_inventory }\nelseif qsinv then\n    Inv = { qs = true, exp = exports['qs-inventory'] }\nelseif qbinv or psinv or ljinv then\n    Inv = { qb = true }\nelseif core then\n    Inv = { core = true, exp = exports.core_inventory }\nelseif codem then\n    Inv = { codem = true }\nend\nSetTimeout(1000, function()\n    if table.type(Inv) == 'empty' then\n        warn(\"No inventory resource was found, check uniq_evidence/inventory.lua\")\n    end\nend)\nfunction Notify(msg, type)\n    lib.notify({\n        description = msg,\n        type = type,\n        position = 'bottom'\n    })\nend\nRegisterNetEvent('uniq_evidence:Notify', Notify)\n-- callback is in server/editable.lua\nfunction HasItem(item)\n    return lib.callback.await('uniq_evidence:HasItem', 100, item)\nend\nif Inv.ox then\n    Inv.exp:displayMetadata('evidence_caseId', 'Evidence No')\nend\nif Inv.core then\n    function GetCoreInv(source, prefix)\n        local identifier = GetIdentifier(source)\n        if identifier then\n            return IsESX() and ('%s-%s'):format(prefix, identifier:gsub(':','')) or ('%s-%s'):format(prefix, identifier)\n        end\n        return false\n    end\n    lib.callback.register('uniq_evidence:server:GetCurrentWeaponCore', function(source)\n        local inventory = GetCoreInv(source, 'primary')\n        if inventory then\n            local wep = Inv.exp:getInventory(inventory)[1]\n            if wep then\n                return wep\n            end\n        end\n        return false\n    end)\nend\nfunction RegisterUsableItem()\n    if IsESX() then\n        if Config.Features.FingerprintsVehicle then\n            ESX.RegisterUsableItem('uv_flashlight', function(source)\n                TriggerClientEvent('uniq_evidence:CheckFingerprints', source)\n            end)\n            ESX.RegisterUsableItem('tweezers', function(source)\n                TriggerClientEvent('uniq_evidence:CheckForShellsInVeh', source)\n            end)\n            ESX.RegisterUsableItem('cleaning_kit', function(source)\n                TriggerClientEvent('uniq_evidence:DestroyFingerPrintsVeh', source)\n            end)\n        end\n        if Config.Features.ShellsInVehicle then\n            ESX.RegisterUsableItem('cleaning_shells', function(source)\n                TriggerClientEvent('uniq_evidence:CheckShellsVehicle', source)\n            end)\n        end\n    elseif IsQBCore() then\n        if Config.Features.FingerprintsVehicle then\n            QBCore.Functions.CreateUseableItem('uv_flashlight', function(source)\n                TriggerClientEvent('uniq_evidence:CheckFingerprints', source)\n            end)\n            QBCore.Functions.CreateUseableItem('tweezers', function(source)\n                TriggerClientEvent('uniq_evidence:CheckForShellsInVeh', source)\n            end)\n            QBCore.Functions.CreateUseableItem('cleaning_kit', function(source)\n                TriggerClientEvent('uniq_evidence:DestroyFingerPrintsVeh', source)\n            end)\n        end\n        if Config.Features.ShellsInVehicle then\n            QBCore.Functions.CreateUseableItem('cleaning_shells', function(source)\n                TriggerClientEvent('uniq_evidence:CheckShellsVehicle', source)\n            end)\n        end\n    end\nend\nCreateThread(RegisterUsableItem)\nfunction GetWeaponSerial(src, weapon, slot)\n    local serial = L('unknwn')\n    if Inv.ox then\n        local wep = Inv.exp:GetCurrentWeapon(src)\n        if wep and wep.metadata then\n            serial = wep.metadata.serial\n        end\n    elseif Inv.qb then\n        local wep = QBCore.Functions.GetPlayer(src)?.Functions.GetItemByName(QBCore.Shared.Weapons[weapon].name)\n        if wep and wep.info then\n            serial = wep.info.serie\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(src)\n        for k,v in pairs(items) do\n            if v.name == weapon and slot == v.slot then\n                if v.info then\n                    serial = v.info.serie\n                    break\n                end\n            end\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(src, 'primary')\n        if inventory then\n            local wep = Inv.exp:getInventory(inventory)[1]\n            if wep and wep.category == 'weapons' then\n                serial = wep.info.serial\n            end\n        end\n    elseif Inv.codem then\n        if weapon and weapon.info then\n            serial = weapon.info.series\n        end\n    end\n    return serial\nend\nlib.callback.register('uniq_evidence:HasItem', function(source, item)\n    if Inv.ox then\n        local count = Inv.exp:GetItemCount(source, item)\n        return count > 0\n    elseif Inv.qb then\n        return QBCore.Functions.HasItem(source, item, 1)\n    elseif Inv.qs then\n        local itemm = Inv.exp:GetItemByName(source, item)\n        if itemm then\n            return itemm.amount > 0\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        local Item = Inv.exp:getItem(inventory, item)\n        if Item then\n            return Item.count > 0\n        end\n    elseif Inv.codem then\n        local itemm = exports['codem-inventory']:GetItemByName(source, item)\n        if itemm then\n            return tonumber(itemm.amount) > 0\n        end\n    end\nend)\nfunction AddItem(source, item, metadata)\n    if Inv.ox then\n        Inv.exp:AddItem(source, item, 1, metadata)\n    elseif Inv.qb then\n        QBCore.Functions.GetPlayer(source)?.Functions.AddItem(item, 1, nil, metadata)\n    elseif Inv.qs then\n        Inv.exp:AddItem(source, item, 1, nil, metadata)\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        Inv.exp:addItem(inventory, item, 1, metadata, 'content')\n    elseif Inv.codem then\n        exports['codem-inventory']:AddItem(source, item, 1, nil, metadata)\n    end\nend\nfunction RemoveItem(source, item, slot)\n    if Inv.ox then\n        Inv.exp:RemoveItem(source, item, 1, nil, slot)\n    elseif Inv.qb then\n        QBCore.Functions.GetPlayer(source)?.Functions.RemoveItem(item, 1, slot)\n    elseif Inv.qs then\n        Inv.exp:RemoveItem(source, item, 1, slot)\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        local Item = Inv.exp:getInventory(inventory)\n        if Item then\n            for k,v in pairs(Item) do\n                if v.name == item then\n                    Inv.exp:removeItemExact(inventory, v.id, 1)\n                    break\n                end\n            end\n        end\n    elseif Inv.codem then\n        exports['codem-inventory']:RemoveItem(source, item, 1, slot)\n    end\nend\nfunction GetItemSlot(source, item, caseId)\n    if Inv.ox then\n        local items = Inv.exp:Search(source, 'slots', item)\n        if items then\n            for k,v in pairs(items) do\n                if v.metadata.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    elseif Inv.qb then\n        local Player = QBCore.Functions.GetPlayer(source)\n        for k,v in pairs(Player.PlayerData.items) do\n            if v.name == item then\n                if v.info.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(source)\n        for k,v in pairs(items) do\n            if v.name == item then\n                if v.info.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    elseif Inv.core then\n        return 0\n    elseif Inv.codem then\n        for k,v in pairs(exports['codem-inventory']:GetItemsByName(source, item)) do\n            if v.name == item and v.info then\n                if v.info.evidence_caseId == caseId then\n                    return v.slot\n                end\n            end\n        end\n    end\nend\nlib.callback.register('uniq_evidence:GetEvidenceByType', function(source, typee)\n    local options = {}\n    if Inv.ox then\n        local items = Inv.exp:GetInventoryItems(source)\n        if items then\n            for k,v in pairs(items) do\n                if v.metadata.evidence_type == typee then\n                    options[#options + 1] = { label = v.metadata.evidence_caseId, value = v.metadata.evidence_caseId }\n                end\n            end\n        end\n    elseif Inv.qb then\n        local Player = QBCore.Functions.GetPlayer(source)\n        for k,v in pairs(Player.PlayerData.items) do\n            if v.info.evidence_type == typee then\n                options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n            end\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(source)\n        for k,v in pairs(items) do\n            if v.info.evidence_type == typee then\n                options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n            end\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        if inventory then\n            local items = Inv.exp:getInventory(inventory)\n            for k, v in pairs(items) do\n                if v.info.evidence_type == typee then\n                    options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n                end\n            end\n        end\n    elseif Inv.codem then\n        local identifier = GetIdentifier(source)\n        local inv = exports['codem-inventory']:GetInventory(identifier, source)\n        if inv then\n            for k,v in pairs(inv) do\n                if v.info?.evidence_type == typee then\n                    options[#options + 1] = { label = v.info.evidence_caseId, value = v.info.evidence_caseId }\n                end\n            end\n        end\n    end\n    return options\nend)\nlib.callback.register('uniq_evidence:GetItemMetadata', function(source, type, caseId)\n    if Inv.ox then\n        local items = Inv.exp:GetInventoryItems(source)\n        if items then\n            for k,v in pairs(items) do\n                if v.metadata.evidence_type == type and v.metadata.evidence_caseId == caseId then\n                    return v.metadata\n                end\n            end\n        end\n    elseif Inv.qb then\n        local Player = QBCore.Functions.GetPlayer(source)\n        for k,v in pairs(Player.PlayerData.items) do\n            if v.info.evidence_type == type and v.info.evidence_caseId == caseId then\n                return v.info\n            end\n        end\n    elseif Inv.qs then\n        local items = Inv.exp:GetInventory(source)\n        for k,v in pairs(items) do\n            if v.info.evidence_type == type and v.info.evidence_caseId == caseId then\n                return v.info\n            end\n        end\n    elseif Inv.core then\n        local inventory = GetCoreInv(source, 'content')\n        if inventory then\n            local items = Inv.exp:getInventory(inventory)\n            for k,v in pairs(items) do\n                if v.info?.evidence_type == type and v.info.evidence_caseId == caseId then\n                    return v.info\n                end\n            end\n        end\n    elseif Inv.codem then\n        local identifier = GetIdentifier(source)\n        local inv = exports['codem-inventory']:GetInventory(identifier, source)\n        if inv then\n            for k,v in pairs(inv) do\n                if v.info?.evidence_type == type and v.info.evidence_caseId == caseId then\n                    return v.info\n                end\n            end\n        end\n    end\n    return {}\nend)\nRegisterNetEvent('uniq_evidence:addBloodMetadata', function(weapon, target)\n    local name = GetName(target)\n    local src = source\n    if name then\n        if Inv.ox then\n            if weapon and weapon.metadata then\n                if not weapon.metadata.dna then\n                    weapon.metadata.dna = {}\n                end\n                if not lib.table.contains(weapon.metadata.dna, name) then\n                    table.insert(weapon.metadata.dna, name)\n                    Inv.exp:SetMetadata(src, weapon.slot, weapon.metadata)\n                    if Config.Notify.blood then\n                        TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                    end\n                end\n            end\n        elseif Inv.qb then\n            if weapon  then\n                local Player = QBCore.Functions.GetPlayer(src)\n                if Player then\n                    local item = Player.Functions.GetItemByName(weapon.name)\n                    if item then\n                        if not item.info.dna then\n                            item.info.dna = {}\n                        end\n                    end\n                    if not lib.table.contains(item.info.dna, name) then\n                        table.insert(item.info.dna, name)\n                        Player.PlayerData.items[item.slot].info = item.info\n                        Player.Functions.SetPlayerData('items', Player.PlayerData.items)\n                        if Config.Notify.blood then\n                            TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                        end\n                    end\n                end\n            end\n        elseif Inv.qs then\n            if weapon and weapon.info then\n                if not weapon.info.dna then\n                    weapon.info.dna = {}\n                end\n                if not lib.table.contains(weapon.info.dna, name) then\n                    table.insert(weapon.info.dna, name)\n                    Inv.exp:SetItemMetadata(src, weapon.slot, weapon.info)\n                    if Config.Notify.blood then\n                        TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                    end\n                end\n            end\n        elseif Inv.core then\n            local inventory = GetCoreInv(src, 'primary')\n            if inventory then\n                local weapon = Inv.exp:getInventory(inventory)\n                if weapon and weapon.category == 'weapons' and weapon.info then\n                    if not weapon.info.dna then\n                        weapon.info.dna = {}\n                    end\n                    if not lib.table.contains(weapon.info.dna, name) then\n                        table.insert(weapon.info.dna, name)\n                        Inv.exp:updateMetadata(inventory, weapon.id, weapon.info)\n                        if Config.Notify.blood then\n                            TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                        end\n                    end\n                end\n            end\n        elseif Inv.codem then\n            if weapon then\n                if not weapon.info.dna then\n                    weapon.info.dna = {}\n                end\n                if not lib.table.contains(weapon.info.dna, name) then\n                    table.insert(weapon.info.dna, name)\n                    exports['codem-inventory']:SetItemMetadata(src, weapon.slot, weapon.info)\n                    if Config.Notify.blood then\n                        TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.have_blood'), 'warning')\n                    end\n                end\n            end\n        end\n    end\nend)\nRegisterNetEvent('uniq_evidence:server:WeaponFingerprints', function(currentWeapon)\n    local src = source\n    local name = GetName(src)\n    if Inv.ox then\n        local weapon = Inv.exp:Search(src, 'slots', currentWeapon.name)\n        local metadata\n        if weapon then\n            for k,v in pairs(weapon) do\n                if v.metadata.serial == currentWeapon.metadata.serial then\n                    metadata = v.metadata\n                    break\n                end\n            end\n        end\n        if not metadata.fingerprint then\n            metadata.fingerprint = {}\n        end\n        if lib.table.contains(metadata.fingerprint, name) then return end\n        table.insert(metadata.fingerprint, name)\n        Inv.exp:SetMetadata(src, currentWeapon.slot, metadata)\n    elseif Inv.qb then\n        if currentWeapon then\n            local Player = QBCore.Functions.GetPlayer(src)\n            if Player then\n                local item = Player.Functions.GetItemByName(currentWeapon.name)\n                if not item.info.fingerprint then\n                    item.info.fingerprint = {}\n                end\n                if lib.table.contains(item.info.fingerprint, name) then return end\n                table.insert(item.info.fingerprint, name)\n                Player.PlayerData.items[item.slot].info = item.info\n                Player.Functions.SetPlayerData('items', Player.PlayerData.items)\n            end\n        end\n    elseif Inv.qs then\n        if not currentWeapon.info.fingerprint then\n            currentWeapon.info.fingerprint = {}\n        end\n        if lib.table.contains(currentWeapon.info.fingerprint, name) then return end\n        table.insert(currentWeapon.info.fingerprint, name)\n        Inv.exp:SetItemMetadata(src, currentWeapon.slot, currentWeapon.info)\n    elseif Inv.core then\n        local inventory = GetCoreInv(src, 'primary')\n        if inventory then\n            local item = Inv.exp:getInventory(inventory)[1]\n            if item.category == 'weapons' then\n                if not item.info.fingerprint then\n                    item.info.fingerprint = {}\n                end\n                if lib.table.contains(item.info.fingerprint, name) then return end\n                table.insert(item.info.fingerprint, name)\n                Inv.exp:updateMetadata(inventory, item.id, item.info)\n                if Config.Notify.printsweapon then\n                    TriggerClientEvent('uniq_evidence:Notify', src, L('Notify.left_fp'), 'warning')\n                end\n            end\n        end\n    elseif Inv.codem then\n        if currentWeapon then\n            if not currentWeapon.info.fingerprint then\n                currentWeapon.info.fingerprint = {}\n                if lib.table.contains(currentWeapon.info.fingerprint, name) then return end\n                table.insert(currentWeapon.info.fingerprint, name)\n                exports['codem-inventory']:SetItemMetadata(source, currentWeapon.slot, currentWeapon.info)\n            end\n        end\n    end\nend)\nLocales['en'] = {\n    unknwn = 'Unknown',\n    Input = {\n        title = 'Select Evidence',\n        desc = 'Select evidence that you want to analyse'\n    },\n    TextUI = {\n        destroy_shell = '[E] - Destroy shell evidence',\n        collect_shell = '[E] - Collect shell evidence',\n        collect_bullet = '[E] - Collect bullet evidence',\n        destroy_bullet = '[E] - Destroy bullet evidence',\n        collect_blood = '[E] - Collect blood evidence',\n        destroy_blood = '[E] - Destroy blood evidence',\n        a_shell = '[E] - Analyze Shell',\n        a_bullet = '[E] - Analyze Bullet',\n        database = '[E] - Open Evidence Database',\n        a_wep = '[E] - Analyze Weapon',\n        a_blood = '[E] - Analyze Blood',\n        a_veh_fp = '[E] - Analyze Fingerprints from vehicle'\n    },\n    Notify = {\n        no_bag = 'You dont have evidnece bag with you',\n        no_evidence = 'Looks like you dont have evidence with you to anaylse',\n        already_collecting = 'Somebody is already collecting this evidence',\n        cancled = 'You cancled searching',\n        cancled_a = 'You cancled analyzing evidence',\n        only_in_veh = 'You can use this only inside vehicle',\n        wrong = 'Something went wrong',\n        no_match = 'No matches',\n        no_evidence_db = 'No evidence in database',\n        left_fp = 'You left fingerprints on weapon',\n        need_hold_wep = 'You need to hold weapon in hand to scann it, make sure you wear gloves :)',\n        left_fp_veh = 'You left fingerprints in this vehicle',\n        no_veh = 'You are not inside any vehicle',\n        no_fp_found = 'No fingerprint were found in this vehicle',\n        found_fp = 'You found some fingerprints in vehicle',\n        destroyed_fp = 'You have destroyed fingerprints from this vehicle',\n        have_blood = 'You have blood on your weapon',\n        nothing_found = 'Nothing found',\n        cant_find_evidence = 'Can\\'t find evidence on server, server will remove it',\n        found_shell = 'You found bullet shells, there might be more',\n        destoyed_shell = 'You destrosyed bullet shells in this vehicle',\n        deleted = 'You succesfully deleted %s from database',\n        destroyed = 'Evidence Destroyed'\n    },\n    ProgressBar = {\n        blood_collect = 'Collecting blood evidence',\n        searching_shells = 'Searching for bullet shells',\n        analyzing_blood = 'Analyzing Blood...',\n        shell_collet = 'Collecting shell',\n        bullet_collect = 'Collecting bullet',\n        analyzing_evidence = 'Analyzing Evidence...',\n        analyzing_wep = 'Analyzing weapon',\n        searching_fp = 'Searching for fingerprints',\n        destorying = 'Destroying Evidence'\n    },\n    Report = {\n        title = 'Evidence: %s',\n        street = 'Street',\n        date = 'Date',\n        time = 'Time',\n        analyst = 'Anaylist',\n        ammo = 'Ammo Type',\n        location = 'Location',\n        serial = 'Weapon Serial Number',\n        label = 'Label',\n        fp_match = 'Fingerprints on weapon matches next entities',\n        blood_match = 'Blood on weapon matches next entities',\n        blood_match2 = 'Blood matches',\n        delete = 'Delete',\n        a_on = 'Analyzed on',\n        a_at = 'Analyzed at',\n        plate = 'Vehicle Plate',\n        fp_match2 = 'Fingerprints matches next entities',\n        color = 'Vehicle color',\n        archived = 'Archived Evidence',\n        wep_analysis = 'Weapon analysis'\n    },\n    Database = {\n        title = 'Evidence Database',\n        bullet_shell = 'Bullet & Shell Reports',\n        weapons = 'Weapon Reports',\n        blood = 'Blood Reports',\n        veh_fp = 'Vehicle Fingerprint Reports',\n        keyword = 'Keywords: Case ID, Date or Time, Street, Serial Number etc.',\n        search = {\n            title = 'Search',\n            label = 'Search for specific case'\n        }\n    }\n}\nConfig = {\n    Locale = 'en',\n    FrameworkName = IsESX() and 'es_extended' or 'qb-core',\n    PlayerLoadedEvent = {\n        esx = 'esx:playerLoaded',\n        qb = 'QBCore:Client:OnPlayerLoaded'\n    },\n    FlashLightWeapon = `WEAPON_FLASHLIGHT`,\n    -- Evidence will be wiped after remaining unchanged for the given time\n    DeleteEvidenceTime = '6 MONTH',\n    EvidenceDatabase = {\n        {\n            coords = vec3(441.754, -996.019, 30.690),\n            /*\n                table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                string       > groups = 'police'                            > only once job can access, no grade checks\n            */\n            groups = { ['police'] = 1 },\n            Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n        },\n        -- you can add more\n    },\n    Features = {\n        BloodGround = true,             -- Drops blood evidence on the ground upon death.\n        WeaponBlood = true,             -- Leaves blood evidence of the target when hitting somebody with a melee weapon\n        BulletAndShell = true,          -- Leaves bullet shell on the ground while firing a weapon.\n        Bullet = true,                  -- Leaves bullet evidence if bullet hits anything\n        ShellsInVehicle = true,         -- Allows searching for bullets in vehicles.\n        FingerprintsVehicle = true,     -- Leaves fingerprint evidence upon entering a vehicle without wearing gloves.\n        FingerprintsWeapon = true,      -- Leaves fingerprint evidence upon using a weapon without wearing gloves.\n    },\n    /*\n        %d/%m/%Y day/month/year\n        %d-%m-%Y day-month-year\n        %m/%d/%Y month/day/year\n        %m-%d-%Y month-day-year\n        %Y/%d/%m year/day/month\n        %Y-%d-%m year-day-month\n        etc\n    */\n    DateFormat = '%d/%m/%Y', -- day/month/year\n    -- variations that DOESN'T have gloves, might be differnet for you, depending on clothing pack\n    Gloves = {\n        [`mp_m_freemode_01`] = {\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n            11, 12, 13, 14, 15, 18, 26, 52,\n            53, 54, 55, 56, 57, 58, 59, 60,\n            61, 62, 112, 113, 114, 118, 125, 132\n        },\n        [`mp_f_freemode_01`] = {\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n            11, 12, 13, 14, 15, 19, 59, 60, 61,\n            62, 63, 64, 65, 66, 67, 68, 69, 70,\n            71, 129, 130, 131, 135, 142, 149, 153,\n            157, 161, 165\n        },\n        -- this models have gloves by default, you can add them here\n        [`s_m_y_swat_01`] = true,\n        /*\n            [`model_name`] = { variations that doesnt have gloves }\n            if case you use ped that has gloves by default but cant change variations (example s_m_y_swat_01 above),\n            you will do next\n            [`model_name`] = true     \n        */\n    },\n    BulletAndShell = {\n        BulletDestroyable = true,\n        ShellDestroyable = true,\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' },\n        -- for how long it will collect evidence, 5000ms = 5 sec\n        CollectingTime = 5000,\n        \n        -- for how long it will analyze evidence, 5000ms = 5 sec\n        AnalyzingTime = 5000,\n        -- for how long it will analyze weapon, 10000ms = 10 sec\n        AnalyzingWeaponTime = 5000,\n        -- jobs that dont leave bullet evidence on ground when shooting\n        NoBulletEvidenceJob = {\n            ['police'] = true,\n            -- you can add more\n        },\n        -- weapons that should not leave bullet evidence when shooting\n        BlacklistWeapons = {\n            [`weapon_stungun`] = true,\n            -- you can add more\n        },\n        Shell = { type = 2, scaleX = 0.1, scaleY = 0.05, scaleZ = 0.07, r = 188, g = 159, b = 96 },\n        Bullet = { type = 2, scaleX = 0.1, scaleY = 0.05, scaleZ = 0.07, r = 182, g = 122, b = 94 },\n        -- time in minutes before evidence disappears\n        RemoveTime = 25,\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        -- you can add as many as you want\n        Scanner = {\n            {\n                type = 'shell', -- scanner for shells or bullet\n                coords = vec3(441.882, -991.446, 30.690),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            {\n                type = 'bullet',\n                coords = vec3(437.030, -990.831, 30.690),\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        EvidenceReport = {\n            date = true,            -- date when evidence was created\n            time = true,            -- time when evidence was created\n            street = true,          -- street address where evidence was created\n            ammolabel = true,       -- type of weapon it was fired from, AmmoLabels\n            weaponSerial = true,    -- serial number of weapon it was fired from, kinda op?\n            analyst = true,         -- name of player who analysed evidence\n            color = true,           -- color of vehicle (if bullet was taken out from vehicle)\n            plate = true,           -- plate of vehicle where shell was taken from   \n        }\n    },\n    Weapon = {\n        Scanner = {\n            {\n                coords = vec3(437.693, -994.525, 30.690),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        EvidenceReport = {\n            date = true,            -- date when evidence was scanned\n            weaponLabel = true,     -- label of weapon\n            time = true,            -- time when evidence was scanned\n            ammolabel = true,       -- type of weapon it was fired from, AmmoLabels\n            weaponSerial = true,    -- serial number of weapon\n            analyst = true,         -- name of player who analysed evidence\n            fingerprint = true,     -- fingerprints of last person who used gun (if not wearing gloves)\n            dna = true,             -- DNA of victim\n        }\n    },\n    Blood = {\n        EvidenceDestroyable = true,\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' },\n        -- if ranining, remove evidence?\n        RemoveEvidenceOnRain = true,\n        -- time in minutes before evidence disappears\n        RemoveTime = 25,\n        -- for how long it will collect evidence, 5000ms = 5 sec\n        CollectingTime = 5000,\n        -- for how long it will analyze evidence, 5000ms = 5 sec\n        AnalyzingTime = 5000,\n        -- blood on ground marker\n        Evidence = { type = 2, scaleX = 0.1, scaleY = 0.05, scaleZ = 0.07, r = 255, g = 0, b = 0 },\n        Scanner = {\n            {\n                coords = vec3(439.117, -993.290, 30.690),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        EvidenceReport = {\n            street = true,          -- street where blood was found\n            date = true,            -- date when evidence was scanned\n            time = true,            -- time when evidence was scanned\n            analyst = true,         -- name of player who analysed evidence\n            dna = true,             -- DNA of victim\n        },\n    },\n    FingerprintsVehicle = {\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' } ,\n        -- here you can whitelist vehicles in which you do not want to leave fingerprints\n        WhitelistModels = { `xyz`, },\n        -- here you can whitelist plates \n        WhiteListPlates = { 'xyz', },\n        WhitelistJobs = {\n            -- xyz and grade 2 and above wont leave fingerprints\n            ['xyz'] = 2\n        },\n        -- here you can add your identifier or citizenid\n        WhitelistIdentifiers = {\n            'char1:xyz',\n        },\n        -- time in msec for searching fingerprints in vehicle\n        FingerSearching = 2000,\n        Scanner = {\n            {\n                coords = vec3(461.881, -989.336, 24.915),\n                /*\n                    table hash   > groups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n                    table array  > groups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n                    string       > groups = 'police'                            > only once job can access, no grade checks\n                */\n                groups = { ['police'] = 1 },\n                Marker = { type = 2, scaleX = 0.3, scaleY = 0.2, scaleZ = 0.15, r = 30, g = 150, b = 30 },\n            },\n            -- you can add more\n        },\n        -- police and grade that can delete evidence from database, must be hash\n        DeleteEvidence = { ['police'] = 2 },\n        EvidenceReport = {\n            street = true,          -- street where fingerprints were found\n            date = true,            -- date when evidence was taken\n            time = true,            -- time when evidence was taken\n            analyst = true,         -- name of player who analysed evidence\n            plate = true,           -- vehicle plates\n            color = true,           -- vehicle color\n        }\n    },\n    ShellsInVehicle = {\n        /*\n            table hash   > CollectEvidenceGroups = { ['police'] = 1, ['sheriff'] = 5 } > grade 1 (and above) police and grade 5 (and above) sheriff can access\n            table array  > CollectEvidenceGroups = { 'police', 'sheriff' }             > police and sherrif can access, no grade check\n            string       > CollectEvidenceGroups = 'police'                            > only once job can access, no grade checks\n            string       > CollectEvidenceGroups = ''                                  > everyone can collect evidence\n        */\n        CollectEvidenceGroups = { 'police', 'sheriff' },\n        -- jobs that wont leave shell evidence in vehicle\n        NoShell = {\n            ['police'] = true\n        },\n        -- weapons that should not leave shell evidence when shooting\n        BlacklistWeapons = {\n            [`weapon_stungun`] = true\n        },\n        -- duration for searching for shells in vehicle\n        SearchingDuration = 2000,\n    },\n    Notify = {\n        blood = true,           -- notify player that he have blood on weapon after hitting somebody\n        printsweapon = true,    -- notify player that he left fingerprints on weapon\n        printsvehicle = true,   -- notify player that he left fingerprints in vehicle\n    },\n    AmmoLabels = {\n        [`WEAPON_ADVANCEDRIFLE`] = '5.56x45',\n        [`WEAPON_APPISTOL`] = '9mm',\n        [`WEAPON_ASSAULTRIFLE`] = '7.62x39',\n        [`WEAPON_ASSAULTRIFLE_MK2`] = '7.62x39',\n        [`WEAPON_ASSAULTSHOTGUN`] = '12 Gauge',\n        [`WEAPON_ASSAULTSMG`] = '5.56x45',\n        [`WEAPON_AUTOSHOTGUN`] = '12 Gauge',\n        [`WEAPON_BULLPUPRIFLE`] = '5.56x45',\n        [`WEAPON_BULLPUPRIFLE_MK2`] = '5.56x45',\n        [`WEAPON_BULLPUPSHOTGUN`] = '12 Gauge',\n        [`WEAPON_CARBINERIFLE`] = '5.56x45',\n        [`WEAPON_CARBINERIFLE_MK2`] = '5.56x45',\n        [`WEAPON_CERAMICPISTOL`] = '9mm',\n        [`WEAPON_COMBATMG`] = '5.56x45',\n        [`WEAPON_COMBATMG_MK2`] = '7.62x39',\n        [`WEAPON_COMBATPDW`] = '9mm',\n        [`WEAPON_COMBATPISTOL`] = '9mm',\n        [`WEAPON_COMBATSHOTGUN`] = '12 Gauge',\n        [`WEAPON_COMPACTLAUNCHER`] = '40mm Explosive',\n        [`WEAPON_COMPACTRIFLE`] = '7.62x39',\n        [`WEAPON_DBSHOTGUN`] = '12 Gauge',\n        [`WEAPON_DOUBLEACTION`] = '.38 LC',\n        [`WEAPON_EMPLAUNCHER`] = 'EMP round',\n        [`WEAPON_FIREWORK`] = 'Firework',\n        [`WEAPON_FLAREGUN`] = 'Flare round',\n        [`WEAPON_GADGETPISTOL`] = '9mm',\n        [`WEAPON_GRENADELAUNCHER`] = '40mm Explosive',\n        [`WEAPON_GUSENBERG`] = '.45 ACP',\n        [`WEAPON_HEAVYPISTOL`] = '.45 ACP',\n        [`WEAPON_HEAVYRIFLE`] = '5.56x45',\n        [`WEAPON_HEAVYSHOTGUN`] = '12 Gauge',\n        [`WEAPON_HEAVYSNIPER`] = '.50 BMG',\n        [`WEAPON_HEAVYSNIPER_MK2`] = '.50 BMG',\n        [`WEAPON_HOMINGLAUNCHER`] = 'Rocket',\n        [`WEAPON_MACHINEPISTOL`] = '9mm',\n        [`WEAPON_MARKSMANPISTOL`] = '.22 Long Rifle',\n        [`WEAPON_MARKSMANRIFLE`] = '7.62x51',\n        [`WEAPON_MARKSMANRIFLE_MK2`] = '7.62x51',\n        [`WEAPON_MG`] = '7.62x39',\n        [`WEAPON_MICROSMG`] = '.45 ACP',\n        [`WEAPON_MILITARYRIFLE`] = '5.56x45',\n        [`WEAPON_MINIGUN`] = '7.62x39',\n        [`WEAPON_MINISMG`] = '9mm',\n        [`WEAPON_MUSKET`] = '.50 Ball',\n        [`WEAPON_NAVYREVOLVER`] = '.44 Magnum',\n        [`WEAPON_PISTOL`] = '9mm',\n        [`WEAPON_PISTOL50`] = '.50 AE',\n        [`WEAPON_PISTOLXM3`] = '9mm',\n        [`WEAPON_PISTOL_MK2`] = '9mm',\n        [`WEAPON_PRECISIONRIFLE`] = '7.62x51',\n        [`WEAPON_PUMPSHOTGUN`] = '12 Gauge',\n        [`WEAPON_PUMPSHOTGUN_MK2`] = '12 Gauge',\n        [`WEAPON_RAILGUN`] = 'Railgun charge',\n        [`WEAPON_RAILGUNXM3`] = 'Railgun charge',\n        [`WEAPON_RAYCARBINE`] = 'Laser charge',\n        [`WEAPON_RAYMINIGUN`] = 'Laser charge',\n        [`WEAPON_REVOLVER`] = '.44 Magnum',\n        [`WEAPON_REVOLVER_MK2`] = '.44 Magnum',\n        [`WEAPON_RPG`] = 'Rocket',\n        [`WEAPON_SAWNOFFSHOTGUN`] = '12 Gauge',\n        [`WEAPON_SMG`] = '9mm',\n        [`WEAPON_SMG_MK2`] = '9mm',\n        [`WEAPON_SNIPERRIFLE`] = '7.62x51',\n        [`WEAPON_SNSPISTOL`] = '.45 ACP',\n        [`WEAPON_SNSPISTOL_MK2`] = '.45 ACP',\n        [`WEAPON_SPECIALCARBINE`] = '5.56x45',\n        [`WEAPON_SPECIALCARBINE_MK2`] = '5.56x45',\n        [`WEAPON_TACTICALRIFLE`] = '5.56x45',\n        [`WEAPON_TECPISTOL`] = '9mm',\n        [`WEAPON_VINTAGEPISTOL`] = '9mm',\n    }\n}"}},"/paid/evidence/api":{"title":"Client","data":{"opencasebyid#OpenCaseByID":"Allowing you to open case via ID in external resources (e.g. MDT).\nexports.uniq_evidence:OpenCaseByID('caseID')"}},"/paid/gang":{"title":"Advanced Gang Creator","data":{"":"The ultimate system for creating, managing, and customizing gangs on your server with ease."}},"/paid/gang/about":{"title":"About Asset","data":{"compatible-frameworks#Compatible Frameworks":"ESX\nQB Core\nQBOX","compatible-inventories#Compatible Inventories":"ox_inventory\nqs-inventory\nqb-inventory\nps-inventory\nlj-inventory\ncodem-inventory\ncore_inventory\nak47_inventory","features#Features":"Creating Gang\nDeleting Gang\nUpdating Gang\nResetting Gang\nMarkers\nBoss marker\nTake vehicle marker (integrated vehicles, purchased vehicles)\nReturn vehicle marker\nHelicopter marker\nLevelling marker\nStash\nStash System\nAbility for everyone to enter stash if they have password (e.g., police can access if they have password). This feature can be disabled.\nIncreasing stash size and weight by levelling up mafia (works on all inventories).\nAction Menu\nCuff\nUncuff\nPut in vehicle\nTake out of vehicle\nDealership\nCommands\nCreating Gang\nDeleting Gang\nTeleporting to base\nFinding base via GPS (for players, can be disabled)\nUpdating Markers Positions\nUpdating Integrated Vehicles\nCustomization\nAdding as many markers as you want\nGarage\nIntegrated vehicles by admin\nPurchased in Dealership\nImpound\nLogs System\nLevelling System\nSecurity & Performance\nProtected against cheats\nOptimized (0.00 - 0.02 ms)"}},"/paid/gang/accessiable":{"title":"Accessible code","data":{"":"inventory.lua\nInv = {}\nlocal oxinv = GetResourceState('ox_inventory'):find('start')\nlocal qsinv = GetResourceState('qs-inventory'):find('start')\nlocal qbinv = GetResourceState('qb-inventory'):find('start')\nlocal psinv = GetResourceState('ps-inventory'):find('start')\nlocal ljinv = GetResourceState('lj-inventory'):find('start')\nlocal core  = GetResourceState('core_inventory'):find('start')\nlocal codem = GetResourceState('codem-inventory'):find('start')\nlocal ak = GetResourceState('ak47_inventory'):find('start')\nif oxinv then\n    Inv = { ox = true, exp = exports.ox_inventory }\nelseif qsinv then\n    Inv = { qs = true, exp = exports['qs-inventory'] }\nelseif qbinv or psinv or ljinv then\n    Inv = { qb = true }\nelseif core then\n    Inv = { core = true }\nelseif codem then\n    Inv = { codem = true }\nelseif ak then\n    Inv = { ak = true, exp = exports['ak47_inventory'] }\nend\nSetTimeout(1000, function()\n    if table.type(Inv) == 'empty' then\n        warn(\"No inventory resource was found, check mh_gang/inventory.lua\")\n        warn(\"No inventory resource was found, check mh_gang/inventory.lua\")\n        warn(\"No inventory resource was found, check mh_gang/inventory.lua\")\n    end\nend)\nbridge/esx/client.lua\nif not IsESX() then return end\nlocal ESX = exports[Config.FrameworkName]:getSharedObject()\nRegisterNetEvent(Config.Events.esx.client.loaded)\nAddEventHandler(Config.Events.esx.client.loaded, function(xPlayer)\n\tPlayerData = xPlayer\n\tPlayerLoaded = true\n    if Config.SetGangAs == 'metadata' then TriggerServerEvent('mh_gang:GetPlayerGang') end\n    Wait(500)\n\tSetUpMafia()\nend)\nRegisterNetEvent(Config.Events.esx.client.setjob)\nAddEventHandler(Config.Events.esx.client.setjob, function(job)\n\tPlayerData.job = job\n    OnGangUpdate()\n    lib.hideTextUI()\nend)\nif Config.SetGangAs == 'job2' then\n    RegisterNetEvent('esx:setJob2')\n    AddEventHandler('esx:setJob2', function(job)\n        PlayerData.job2 = job\n        OnGangUpdate()\n        lib.hideTextUI()\n    end)\nend\nRegisterNetEvent(Config.Events.esx.client.logout, function()\n    table.wipe(PlayerData)\n    PlayerLoaded = false\nend)\nfunction IsBoss()\n    if Config.SetGangAs == 'job' then\n        return PlayerData.job.grade_name == 'boss'\n    elseif Config.SetGangAs == 'job2' then\n        return PlayerData.job2.grade_name == 'boss'\n    elseif Config.SetGangAs == 'metadata' then\n        return PlayerData.gang?.name == 'boss'\n    end\nend\nRegisterNetEvent('mh_gang:setPlayerData', function(data)\n    PlayerData.gang = data\n    OnGangUpdate()\n    lib.hideTextUI()\nend)\nfunction GetGang()\n    if PlayerLoaded then\n        if Config.SetGangAs == 'job' then\n            return PlayerData.job.name\n        elseif Config.SetGangAs == 'job2' then\n            return PlayerData.job2.name\n        elseif Config.SetGangAs == 'metadata' then\n            return PlayerData.gang?.job_name\n        end\n    else\n        return ''\n    end\nend\nexports('GetGang', function()\n    while not PlayerLoaded do Wait(50) end\n    \n    if Config.SetGangAs == 'job' then\n        return PlayerData.job\n    elseif Config.SetGangAs == 'job2' then\n        return PlayerData.job2\n    elseif Config.SetGangAs == 'metadata' then\n        return PlayerData.gang\n    end\n    return false\nend)\nAddEventHandler('onResourceStart', function(resource)\n    if cache.resource == resource then\n        Wait(1000)\n        PlayerData = ESX.GetPlayerData()\n        TriggerServerEvent('mh_gang:GetPlayerGang')\n        Wait(500)\n        PlayerLoaded = true\n        SetUpMafia()\n    end\nend)\nbridge/esx/server.lua\nif not IsESX() then return end\nESX = exports[Config.FrameworkName]:getSharedObject()\nfunction GetGang(src)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    if xPlayer then\n        if Config.SetGangAs == 'job' then\n            return xPlayer.job.name\n        elseif Config.SetGangAs == 'job2' then\n            return xPlayer.job2.name\n        elseif Config.SetGangAs == 'metadata' then\n            return GetMetadataGang(src)\n        end\n    end\n    return false\nend\nexports('GetGang', function(playerId)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    if xPlayer then\n        if Config.SetGangAs == 'job' then\n            return xPlayer.job\n        elseif Config.SetGangAs == 'job2' then\n            return xPlayer.job2\n        elseif Config.SetGangAs == 'metadata' then\n            return GetMetadataGangData(playerId)\n        end\n    end\n    return false\nend)\nfunction GetMoney(src)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    if xPlayer then\n        return xPlayer.getMoney()\n    end\n    return 0\nend\nfunction RemoveMoney(src, amount)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    if xPlayer then\n        xPlayer.removeMoney(amount)\n    end\nend\nfunction SetGang(src, name, grade)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    if xPlayer then\n        if Config.SetGangAs == 'job' then\n            xPlayer.setJob(name, grade)\n        elseif Config.SetGangAs == 'job2' then\n            xPlayer.setJob2(name, grade)\n        elseif Config.SetGangAs == 'metadata' then\n            UpdateGang(src, Jobs[name].grades[tostring(grade)])\n        end\n    end\nend\nfunction GradeUpdateBoss(src, data)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    local xTarget = ESX.GetPlayerFromIdentifier(data.identifier)\n    if Config.SetGangAs == 'job' then\n        if IsBoss(xPlayer.source) then\n            if xTarget then\n                xTarget.setJob(data.job, data.grade)\n                DiscordLog(L('discord.gradeUpdate.online.title'), L('discord.gradeUpdate.online.msg'):format(GetPlayerName(xPlayer.source), GetPlayerName(xTarget.source), data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n            else\n                MySQL.update('UPDATE `users` SET `job` = ?, `job_grade` = ? WHERE `identifier` = ?', {data.job, data.grade, data.identifier})\n                DiscordLog(L('discord.gradeUpdate.offline.title'), L('discord.gradeUpdate.offline.msg'):format(GetPlayerName(xPlayer.source), data.identifier, data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n            end\n        else\n            print( ('%s (%s) tried to update grade for %s but isnt boss'):format(GetPlayerName(xPlayer.source), xPlayer.identifier, data.identifier) )\n            DiscordLog(L('discord.gradeUpdate.title.cheater'), L('discord.gradeUpdate.msg.cheater'):format(GetPlayerName(xPlayer.source), data.identifier), Discord.TagEveryoneFields.updateGradeCheater)\n        end\n    elseif Config.SetGangAs == 'job2' then\n        if IsBoss(xPlayer.source) then\n            if xTarget then\n                xTarget.setJob2(data.job, data.grade)\n                DiscordLog(L('discord.gradeUpdate.online.title'), L('discord.gradeUpdate.online.msg'):format(GetPlayerName(xPlayer.source), GetPlayerName(xTarget.source), data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n            else\n                MySQL.update('UPDATE `users` SET `job2` = ?, `job2_grade` = ? WHERE `identifier` = ?', {data.job, data.grade, data.identifier})\n                DiscordLog(L('discord.gradeUpdate.offline.title'), L('discord.gradeUpdate.offline.msg'):format(GetPlayerName(xPlayer.source), data.identifier, data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n            end\n        else\n            print( ('%s (%s) tried to update grade for %s but isnt boss'):format(GetPlayerName(xPlayer.source), xPlayer.identifier, data.identifier) )\n            DiscordLog(L('discord.gradeUpdate.title.cheater'), L('discord.gradeUpdate.msg.cheater'):format(GetPlayerName(xPlayer.source), data.identifier), Discord.TagEveryoneFields.updateGradeCheater)\n        end\n    elseif Config.SetGangAs == 'metadata' then\n        if IsBoss(xPlayer.source) then\n            if xTarget then\n                UpdateGang(xTarget.source, Jobs[data.job]?.grades[tostring(data.grade)])\n                DiscordLog(L('discord.gradeUpdate.online.title'), L('discord.gradeUpdate.online.msg'):format(GetPlayerName(xPlayer.source), GetPlayerName(xTarget.source), data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n            else\n                MySQL.update('UPDATE `mh_gang_users` SET `job` = ? WHERE `identifier` = ?', { json.encode(Jobs[data.job].grades[tostring(data.grade)], { sort_keys = true }), data.identifier })\n                DiscordLog(L('discord.gradeUpdate.offline.title'), L('discord.gradeUpdate.offline.msg'):format(GetPlayerName(xPlayer.source), data.identifier, data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n            end\n        else\n            print( ('%s (%s) tried to update grade for %s but isnt boss'):format(GetPlayerName(xPlayer.source), xPlayer.identifier, data.identifier) )\n        end\n    end\nend\nfunction AddMoney(src, amount)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    if xPlayer then\n        xPlayer.addMoney(amount)\n    end\nend\nfunction IsBoss(src)\n    local xPlayer = ESX.GetPlayerFromId(src)\n    if Config.SetGangAs == 'job' then\n        if xPlayer then\n            return xPlayer.job.grade_name == 'boss'\n        end\n    elseif Config.SetGangAs == 'job2' then\n        return xPlayer.job2.grade_name == 'boss'\n    elseif Config.SetGangAs == 'metadata' then\n        return IsBossGangMetadata(src)\n    end\nend\nfunction GetPlayerNameFramework(source)\n    if source then\n        return ESX.GetPlayerFromId(source)?.name\n    end\n    return 'Unknown'\nend\nfunction GetJobInfo(job)\n    local jobs = ESX.GetJobs()\n    if jobs[job] then\n        return jobs[job]\n    end\n    return {}\nend\nbridge/qb/client.lua\nif not IsQBCore() then return end\nlocal QBCore = exports[Config.FrameworkName]:GetCoreObject()\nAddEventHandler(Config.Events.qb.client.loaded, function()\n    PlayerData = QBCore.Functions.GetPlayerData()\n    PlayerLoaded = true\n    Wait(250)\n\tSetUpMafia()\nend)\nRegisterNetEvent(Config.Events.qb.client.logout, function()\n    PlayerData = {}\n    PlayerLoaded = false\nend)\nRegisterNetEvent(Config.Events.qb.client.setplayerdata, function(val)\n    PlayerData = val\nend)\nRegisterNetEvent(Config.Events.qb.client.gangupdate, function(JobInfo)\n\tPlayerData.gang = JobInfo\n    OnGangUpdate()\n    lib.hideTextUI()\nend)\nfunction IsBoss()\n    if not PlayerLoaded then return nil end\n    if PlayerData.gang.grade.isboss then\n        return true\n    end\n    if PlayerData.gang.isboss then\n        return true\n    end\n    return false\nend\nfunction GetGang()\n    if not PlayerLoaded then return nil end\n    return PlayerData.gang.name\nend\nexports('GetGang', function()\n    while not PlayerLoaded do Wait(50) end\n    \n    if PlayerLoaded then\n        return PlayerData.gang\n    end\n    return false\nend)\nAddEventHandler('onResourceStart', function(resource)\n\tif resource == cache.resource then\n\t\tWait(2000)\n        PlayerData = QBCore.Functions.GetPlayerData()\n        PlayerLoaded = true\n\t\tSetUpMafia()\n\tend\nend)\nbridge/qb/server.lua\nif not IsQBCore() then return end\nQBCore = exports[Config.FrameworkName]:GetCoreObject()\nfunction ReloadObject()\n    QBCore = exports[Config.FrameworkName]:GetCoreObject()\nend\nfunction GetGang(src)\n    local Player = QBCore.Functions.GetPlayer(src)\n    if Player then\n        return Player.PlayerData.gang.name\n    end\n    return false\nend\nexports('GetGang', function(playerId)\n    local Player = QBCore.Functions.GetPlayer(playerId)\n    if Player then\n        return Player.PlayerData.gang\n    end\n    return false\nend)\nfunction GetMoney(src)\n    local Player = QBCore.Functions.GetPlayer(src)\n    if Player then\n        return Player.PlayerData.money['cash']\n    end\n    return 0\nend\nfunction GradeUpdateBoss(src, data)\n    local xPlayer = QBCore.Functions.GetPlayer(src)\n    local xTarget = QBCore.Functions.GetPlayerByCitizenId(data.identifier)\n    if IsBoss(src) then\n        if xTarget then\n            xTarget.Functions.SetGang(data.job, data.grade)\n            DiscordLog(L('discord.gradeUpdate.online.title'), L('discord.gradeUpdate.online.msg'):format(GetPlayerName(xPlayer.PlayerData.source), GetPlayerName(xTarget.PlayerData.source), data.grade), Discord.TagEveryoneFields.updateGradeOnline)\n        else\n            local ganggrade = QBCore.Shared.Gangs[data.job].grades[data.grade]\n            local newData = {}\n            newData.gang = {}\n            newData.gang.name = data.job\n            newData.gang.label = QBCore.Shared.Gangs[data.job].label\n            newData.gang.grade = {}\n            newData.gang.grade.name = ganggrade.name\n            newData.gang.grade.level = data.grade\n            newData.gang.grade.isboss = ganggrade.isboss or false\n            MySQL.update('UPDATE `players` SET `gang` = ? WHERE citizenid = ?', { json.encode(newData.gang), data.identifier})\n        end\n    else\n        print( ('%s (%s) tried to update grade for %s but isnt boss'):format(GetPlayerName(xPlayer.PlayerData.source), xPlayer.identifier, data.identifier) )\n        DiscordLog(L('discord.gradeUpdate.title.cheater'), L('discord.gradeUpdate.msg.cheater'):format(GetPlayerName(xPlayer.PlayerData.source), data.identifier), Discord.TagEveryoneFields.updateGradeCheater)\n    end\nend\nfunction RemoveMoney(src, amount)\n    local Player = QBCore.Functions.GetPlayer(src)\n    if Player then\n        Player.Functions.RemoveMoney('cash', amount)\n    end\nend\nfunction IsBoss(src)\n    local Player = QBCore.Functions.GetPlayer(src)\n    if Player then\n        if Player.PlayerData.gang.grade.isboss or Player.PlayerData.gang.isboss then\n            return true\n        end\n    end\n    return false\nend\nfunction AddMoney(src, amount)\n    local Player = QBCore.Functions.GetPlayer(src)\n    if Player then\n        Player.Functions.AddMoney('cash', amount)\n    end\nend\nfunction SetGang(src, name, grade)\n    local Player = QBCore.Functions.GetPlayer(src)\n    if Player then\n        Player.Functions.SetGang(name, grade)\n    end\nend\nbridge/framework.lua\nPlayerData = {}\nPlayerLoaded = false\nfunction IsESX()\n    return GetResourceState(\"es_extended\") ~= \"missing\"\nend\nfunction IsQBCore()\n    return GetResourceState(\"qb-core\") ~= \"missing\"\nend\nclient/editable.lua\nfunction sendNotify(title, description, type)\n    lib.notify({\n        title = title,\n        description = description,\n        duration = 4500,\n        type = type,\n        position = 'bottom'\n    })\nend\nRegisterNetEvent('mh_gang:notify', sendNotify)\nlocal illenium = GetResourceState('illenium-appearance'):find('start')\nfunction OpenWardrobe()\n    if illenium then\n        TriggerEvent('illenium-appearance:client:openOutfitMenu')\n    end\nend\nlocal NewQb = false\nif Inv.qb then\n    local version = GetResourceMetadata('qb-inventory', 'version')\n    if version then\n        local ver = tonumber(version:match('^(%d+)%.'))\n        if ver >= 2 then\n            NewQb = true\n        else\n            NewQb = false\n        end\n    end\nend\nfunction OpenNearbyPlayerInventory(id)\n    if id then\n        if Inv.ox then\n            Inv.exp:openInventory('player', id)\n        elseif Inv.qb then\n            if not NewQb then\n                TriggerServerEvent(\"inventory:server:OpenInventory\", \"otherplayer\", id)\n            else\n                TriggerServerEvent('mh_gang:server:OpenNearbyPlayer', id)\n            end\n        elseif Inv.ak then\n            Inv.exp:OpenInventory(id)\n        end\n    end\nend\nfunction OpenGangStash(id, job, level)\n    if Inv.ox then\n        Inv.exp:openInventory('stash', id)\n    elseif Inv.qs then\n        TriggerServerEvent(Config.InventoryPrefix..\":server:OpenInventory\", \"stash\", id, {\n            maxweight = Config.stash[level][2] * 1000,\n            slots = Config.stash[level][1],\n        })\n        TriggerEvent(Config.InventoryPrefix..\":client:SetCurrentStash\", id)\n    elseif Inv.qb then\n        if not NewQb then\n            TriggerServerEvent(\"inventory:server:OpenInventory\", \"stash\", id, {\n                maxweight = Config.stash[level][2] * 1000,\n                slots = Config.stash[level][1],\n            })\n            TriggerEvent(\"inventory:client:SetCurrentStash\", id)\n        else\n            TriggerServerEvent('mh_gang:server:OpenQBInv', job, id)\n        end\n    elseif Inv.core then\n        TriggerServerEvent('core_inventory:server:openInventory', id, 'stash')\n    elseif Inv.codem then\n        TriggerServerEvent('codem-inventory:server:openstash', id, Config.stash[level][1], Config.stash[level][2], '')\n    elseif Inv.ak then\n        Inv.exp:OpenInventory(id)\n    end\nend\nlocal qskeys = GetResourceState('qs-vehiclekeys'):find('start')\nlocal wasabikeys = GetResourceState('wasabi_carlock'):find('start')\nlocal qbkeys = GetResourceState('wasabi_carlock'):find('start')\nfunction GiveCarKeys(vehicle, plate)\n    if qskeys then\n        exports['qs-vehiclekeys']:GiveKeysAuto()\n    elseif wasabikeys then\n        exports.wasabi_carlock:GiveKey(plate)\n    else\n        TriggerEvent('qb-vehiclekeys:client:AddKeys', plate)\n        TriggerEvent('vehiclekeys:client:SetOwner', plate)\n    end\nend\nfunction RemoveCarKeys(vehicle, plate)\n    if qskeys then\n        local model = GetDisplayNameFromVehicleModel(GetEntityModel(cache.vehicle))\n        exports['qs-vehiclekeys']:RemoveKeys(plate, model)\n    elseif wasabikeys then\n        exports.wasabi_carlock:RemoveKey(plate)\n    elseif qbkeys then\n        TriggerEvent('qb-vehiclekeys:client:RemoveKeys', plate)\n    end\nend\n-- triggered when player is cuffed/uncuffed\nAddEventHandler('mh_gang:cuffPlayer', function(value)\n    \nend)\nserver/editable.lua\nif IsQBCore() then\n    local qbox = GetResourceState('qbx_core'):find('start')\n    local qbcore = GetResourceState('qb-core'):find('start')\n    function InsertGang(label, name, grades)\n        if qbox then\n            local gang = {}\n            local newValue, newGrades = {}, {}\n            for k,v in pairs(grades) do\n                newValue[#newValue+1] = { id = tonumber(k), data = v }\n            end\n            table.sort(newValue, function(a, b)\n                return a.id < b.id\n            end)\n            for k,v in pairs(newValue) do\n                newGrades[v.id] = v.data\n            end\n            gang[name] = {\n                label = label,\n                grades = newGrades,\n            }\n            return exports['qbx_core']:CreateGangs(gang)\n        elseif qbcore then\n            local gang = {\n                label = label,\n                grades = grades\n            }\n            return QBCore.Functions.AddGang(name, gang)\n        end\n    end\n    function SetGang(source, name, grade)\n        if qbox then\n            QBCore.Functions.GetPlayer(source)?.Functions.SetGang(name, tonumber(grade))\n        elseif qbcore then\n            QBCore.Functions.GetPlayer(source)?.Functions.SetGang(name, tostring(grade))\n        end\n    end\nend\nfunction GiveSalary(source, salary)\n    if IsESX() then\n        ESX.GetPlayerFromId(source)?.addAccountMoney('bank', salary, 'Paycheck')\n    elseif IsQBCore() then\n        QBCore.Functions.GetPlayer(source)?.Functions.AddMoney('cash', salary, 'Paycheck')\n    end\nend\nfunction RegisterGangStash(id, label, level)\n    if Inv.ox then\n        Inv.exp:RegisterStash(id, label, Config.stash[tonumber(level)][1], Config.stash[tonumber(level)][2] * 1000, false)\n    elseif Inv.qs then\n        Inv.exp:RegisterStash('', id, Config.stash[tonumber(level)][1], Config.stash[tonumber(level)][2])\n    elseif Inv.ak then\n        Inv.exp:CreateInventory(id, {\n            label = label,\n            maxWeight = Config.stash[tonumber(level)][2],\n            maxSlots = Config.stash[tonumber(level)][1],\n            type = 'stash',\n        })\n    end\nend\nRegisterNetEvent('mh_gang:server:OpenQBInv', function(job, name)\n    local src = source\n    local gang = exports.mh_gang:DoesGangExist(job)\n    if type(gang) == \"table\" then\n        exports['qb-inventory']:OpenInventory(src, name, {\n            maxweight = Config.stash[tonumber(gang.level)][2] * 1000,\n            slots = Config.stash[tonumber(gang.level)][2],\n        })\n    end\nend)\nRegisterNetEvent('mh_gang:server:OpenNearbyPlayer', function(id)\n    local src = source\n    local gang = GetGang(src)\n    if gang ~= '' then\n        exports['qb-inventory']:OpenInventoryById(src, tonumber(id))\n    end\nend)\nconfig/config.lua\nConfig = {\n    FrameworkName = IsESX() and 'es_extended' or 'qb-core',\n    Locale = 'en',\n    -- spawning vehicles via server side, if you have issues where it takes too long to spawn vehicle or something like this put this to false\n    SpawnVehicleServerSide = false,\n    Events = {\n        esx = {\n            client = {\n                loaded = 'esx:playerLoaded',\n                logout = 'esx:onPlayerLogout',\n                setjob = 'esx:setJob'\n            },\n            server = {\n                loaded = 'esx:playerLoaded',\n                logout = 'esx:playerLogout'\n            }\n        },\n        qb = {\n            client = {\n                loaded = 'QBCore:Client:OnPlayerLoaded',\n                logout = 'QBCore:Client:OnPlayerUnload',\n                setplayerdata = 'QBCore:Player:SetPlayerData',\n                gangupdate = 'QBCore:Client:OnGangUpdate'\n            }\n        }\n    },\n    enableWardrobe = true,              -- enables function for opening wardrobe, in client/editable.lua in OpenWardrobe function put your event\n    disableIntegratedVehicles = false,  -- option for disabling integrated vehicles\n    -- players only can be searched if you cuff them first\n    SearchOnlyWhenCuffed = true,\n    -- disable moving while cuffed?\n    freezeWhileCuffed = true,\n    -- ESX ONLY\n    --SetGangAs = 'job',            -- will set gang as job\n    --SetGangAs = 'job2',           -- will set gang as job2\n    --SetGangAs = 'metadata',       -- will set gang on our system and work from there leaving your job or job2 free to use\n    SetGangAs = 'metadata',\n    InventoryPrefix = 'inventory',      -- If you use Quasar Inventory then you need to modify this to match prefix as in Quasar Inventory\n    -- cuff, uncuff, put in vehicle on target script?\n    MafiaActionsOnTarget = false,\n    VehiclePlate = { -- https://overextended.dev/ox_lib/Modules/String/Shared#libstring\n        pattern = '........',\n        length = 8\n    },\n    TargetOptions = {\n        search = true,\n        cuff = true,\n        escort = true,\n        putin = true,\n        takeout = true\n    },\n    mafiaMenu = {                       -- f6 action menu position, available positions: 'top-left' or 'top-right' or 'bottom-left' or 'bottom-right'\n        defaultKey = 'F6',              -- key for opening menu\n        position = 'top-right',\n        enabled = false,                 -- if you dont want it put false\n    },\n    commands = {\n        creator = {\n            name = 'creategang',       -- command for creating gang\n            restricted = 'group.admin', -- grop that will have acces to command \n        },\n        deleteMafia = {\n            name = 'deletegang',         -- command for deleting gang, /deletegang gang\n            restricted = 'group.admin'  -- group that will have acces to command \n        },\n        teleportToBase = {\n            name = 'tpbase',            -- command for teleporting to gang, /tpbase gang\n            restricted = 'group.admin'  -- group that will have acces to command \n        },\n        findBase = {\n            name = 'findbase',          -- command for players to find their base via gps\n            enabled = true              -- by puting here false you disable this command\n        },\n        resetMarker = {\n            name = 'resetmarker',       -- command for reseting all markers to 1 again\n            restricted = 'group.admin'  -- group that will have acces to command \n        },\n        updateCars = {\n            name = 'updatevehicles',    -- command for updating integrated vehicles in gang\n            restricted = 'group.admin'  -- group that will have acces to command \n        },\n        updateHeli = {\n            name = 'updateheli',        -- command for updating integrated helicotpers in gang\n            restricted = 'group.admin'  -- group that will have acces to command \n        },\n        newMarker = {\n            name = 'newmarker',         -- command for adding more markers\n            restricted = 'group.admin', -- group that will have acces to command \n        },\n        setGang = {\n            name = 'uisetgang',           -- command for setting gang\n            restricted = 'group.admin'    -- group that will have acces to command \n        },\n        removeGang = {\n            name = 'removegang',\n            restricted = 'group.admin',\n        },\n        mygang = {\n            name = 'mygang',\n            restricted = 'group.admin'\n        }\n    },\n    -- if set to true everybody at server who has password can acces stash\n    stashAccessEveryone = false, -- if set to false only people who has job can access that stash, again if they have password\n    stash = {\n        [1] = {10, 10},     -- [level] = {slots, kg}\n        [2] = {20, 20},     -- [level] = {slots, kg}\n        [3] = {30, 30},     -- [level] = {slots, kg}\n        [4] = {40, 40},     -- [level] = {slots, kg}\n        [5] = {50, 50},     -- [level] = {slots, kg}\n        [6] = {60, 60},     -- [level] = {slots, kg}\n        [7] = {70, 70},     -- [level] = {slots, kg}\n        [8] = {80, 80},     -- [level] = {slots, kg}\n        [9] = {90, 90},     -- [level] = {slots, kg}\n        [10] = {100, 100},  -- [level] = {slots, kg}\n    },\n    Levels = {               -- prices for levels\n        [1] = 500,           -- price for level 2 \n        [2] = 1000,          -- price for level 3\n        [3] = 1500,          -- price for level 4\n        [4] = 2000,          -- price for level 4 \n        [5] = 2500,          -- price for level 4 \n        [6] = 3000,          -- price for level 4 \n        [7] = 3500,          -- price for level 4\n        [8] = 4000,          -- price for level 4 \n        [9] = 4500,          -- price for level 4 \n        [10] = 5000,         -- price for level 4 \n    },\n    firePlayerData = {\n        qb = {\n            job = 'none',\n            grade = 0\n        },\n        -- if your SetGangAs is metadata then this is not important\n        esx = {\n            job = 'unemployed',\n            grade = 0,\n        }\n    },\n    TuneOptions = {\n        modEngine = 3,\n        modBrakes = 2,\n        modTransmission = 2,\n        modSuspension = 3,\n        modArmor = true,\n        windowTint = 1,\n        -- other possibilities you can find here: https://overextended.dev/ox_lib/Modules/VehicleProperties/Client#vehicle-properties\n        -- if you dont know how to setup this properly, open ticket at our discord\n    },\n    dealership = {                                                  -- only mafia can see blip and open dealership\n        enable = true,                                              -- if you dont want this option put false here, ALSO DISABLES OWNED VEHICLES GARAGE\n        blip = {\n            type = 227,                                             -- https://docs.fivem.net/docs/game-references/blips/\n            scale = 0.6,\n            colour = 3,                                             -- https://docs.fivem.net/docs/game-references/blips/#blip-colors\n            text = 'Illegal Dealership'\n        },\n        coords = vec3(499.257, -1338.011, 29.319),                  -- coords for marker, blip\n        vehiclePreview = vec4(493.756, -1332.161, 28.336, 252.884),\n        unitCalculator = 'kmh'                                      -- or 'mph', this is for calculating vehicle max speed\n    },\n    -- only mafia can see blip and interact\n    impound = {\n        blip = {\n            type = 227,     -- https://docs.fivem.net/docs/game-references/blips/\n            scale = 0.6,\n            colour = 1,     -- https://docs.fivem.net/docs/game-references/blips/#blip-colors\n            text = 'Illegal Impound'\n        },\n        coords = vec3(-465.680, -1707.112, 18.811), -- marker\n        spawn = vec3(-456.535, -1706.918, 18.819),  -- coords where vehicle spawns after purchasing\n    },\n    ImpoundPrices = {\n        -- These are vehicle classes\n        [0] = 300,      -- Compacts\n        [1] = 500,      -- Sedans\n        [2] = 500,      -- SUVs\n        [3] = 800,      -- Coupes\n        [4] = 1200,     -- Muscle\n        [5] = 800,      -- Sports Classics\n        [6] = 1500,     -- Sports\n        [7] = 2500,     -- Super\n        [8] = 300,      -- Motorcycles\n        [9] = 500,      -- Off-road\n        [10] = 1000,    -- Industrial\n        [11] = 500,     -- Utility\n        [12] = 600,     -- Vans\n        [13] = 100,     -- Cylces\n        [14] = 2800,    -- Boats\n        [15] = 3500,    -- Helicopters\n        [16] = 3800,    -- Planes\n        [17] = 500,     -- Service\n        [18] = 0,       -- Emergency\n        [19] = 100,     -- Military\n        [20] = 1500,    -- Commercial\n        [21] = 0        -- Trains (lol)\n    },\n    Payout = {\n        enabled = true,         -- if you have in es_extended config Config.EnableSocietyPayouts = false then put this to false, otherwise people will get payout in this script and and via es_extended, if you use SetGangAs = 'metadata' then this doesnt apply, same applies to qb core\n        payFromBalance = true,  -- should people get salary from gang balance?,\n        interval = 7 * 60000    -- how often to recieve pay checks in milliseconds, (7min)\n    }\n}\nconfig/server_config.lua\nDiscord = {\n    url = '',  -- url here\n    title = 'Server Name',\n    /*\n        https://www.spycolor.com/\n        ['default'] = 14423100,\n        ['blue'] = 255,\n        ['red'] = 16711680,\n        ['green'] = 65280,\n        ['white'] = 16777215,\n        ['black'] = 0,\n        ['orange'] = 16744192,\n        ['yellow'] = 16776960,\n        ['pink'] = 16761035,\n        ['lightgreen'] = 65309,\n    */\n    color = 65309, -- green\n    imageUrl = '', -- optional, if you dont want it put ''\n    TagEveryoneFields = {               -- here you can handle which log should/or not tag @everyone\n        mafiaCreating = false,          -- when mafia is created by admin\n        levelUp = false,                -- when players level up their mafia \n        firePeopleOnline = false,       -- when players fires people from mafia that are online\n        firePeopleOffline = false,      -- when players fires people from mafia that are offline\n        firePeopleCheater = true,       -- when somebody tries to fire people from mafia without boss grade\n        hire = false,                   -- when boss hires new people\n        hireCheater = true,             -- when somebody that doesnt have boss grade tries to hire via cheat\n        eventCheck = true  ,            -- when tries to execute event via executor\n        updateGradeCheater = true,      -- when somebody tries to update grade for players that doesnt have boss\n        updateGradeOnline = false,      -- when grade is updated for players\n        moneyWithdraw = false,          -- when money is withdrawn from mafia\n        moneyDeposit = false,           -- when money is deposited in mafia\n        vehicleBuy = false,             -- vehicle buying\n        deleteVehicles = false,         -- when admin deletes integrated vehicle from mafia\n        newVehicle = false,             -- when new vehicle is added by admin\n        updateBoss = false,             -- when boss menu marker is updated via command\n        vehicleMarker = false,          -- when vehicle marker is updated via command\n        heliMarker = false,             -- when helicopter marker is updated via command\n        lvl = false,                    -- when level marker is updated via command\n        stashUpdate = false,            -- when stash position is updated via command\n    }\n}\nconfig/vehicles.lua\nVehicles = {\n    ['sport'] = {\n        {label = 'sport', values = {\n            {label = 'Adder', model = `adder`, price = 1000, description = '', level = 1 },\n            {label = 'Zentorno', model = `zentorno`, price = 2000, description = '', level = 1 },\n            {label = 'T20', model = `t20`, price = 3000, description = '', level = 1 },\n        }}\n    },\n    ['coupes'] = {\n        {label = 'coupes', values = {\n            {label = 'Felon', model = `Felon`, price = 1000, description = '', level = 1 },\n            {label = 'FelonB', model = `felon2`, price = 2000, description = '', level = 1 },\n            {label = 'Oracle', model = `Oracle`, price = 3000, description = '', level = 1 },\n        }}\n    },\n    ['offroads'] = {\n        {label = 'offroads', values = {\n            {label = 'Bfinjection', model = `bfinjection`, price = 1000, description = '', level = 1 },\n            {label = 'Bifta', model = `bifta`, price = 2000, description = '', level = 1 },\n            {label = 'Bodhi', model = `bodhi2`, price = 3000, description = '', level = 1 },\n        }}\n    },\n}\nlocales/en.lua\nLocales['en'] = {\n  -- ### CREATOR ### ---\n  ['creator'] = 'Gang Creator',\n  ['creator.name'] = 'Name',\n  ['creator.label'] = 'Label',\n  ['creator.pw'] = 'Password for stash',\n  ['creator.pw.description'] = 'Anything is acceptable',\n  ['creator.vehicles'] = 'Vehicles',\n  ['creator.vehicles.description'] = 'How many vehicles this gang will have (OPTIONAL)',\n  ['creator.heli'] = 'Helicopters',\n  ['creator.heli.description'] = 'How many vehicles this gang will have (OPTIONAL)',\n  ['creator.grades'] = 'Grades',\n  ['creator.grades.description'] = 'How many grades this gang will have',\n  ['creator.mafiacreated'] = 'Successfully created %s gang',\n  -- grades menu creator\n  ['grade'] = 'Grades Menu (%s/%s)',\n  ['grade.name'] = 'Grade Name',\n  ['grade.placeholder'] = 'member (If boss name it boss)',\n  ['grade.label'] = 'Grade Label',\n  ['grade.label.placeholder'] = 'Member',\n  ['grade.salary'] = 'Salary',\n  -- vehicle menus creator\n  ['veh'] = 'Vehicle Menu',\n  ['veh.label'] = 'Vehicle Label',\n  ['veh.label.placeholder'] = 'Peggasi Zentorno',\n  ['veh.spawncode'] = 'Spawn Code',\n  ['veh.spawncode.placeholder'] = 'zentorno',\n  ['veh.color1'] = 'Primary Color',\n  ['veh.color2'] = 'Secondary Color',\n  ['veh.fulltune'] = 'Full Tune',\n  ['veh.optional'] = 'Optional',\n  ['veh.update.name'] = 'Chose Gang',\n  ['veh.update.action'] = 'Chose Action',\n  ['veh.options.add'] = 'Add New',\n  ['veh.options.update'] = 'Update',\n  ['veh.options.delete'] = 'Delete',\n  ['veh.options.update.name'] = 'Chose Vehicle',\n  ['player.not.cuffed'] = 'Player is not cuffed',\n  -- ui set gang\n  ['setgangui.label'] = 'Player ID',\n  ['setgangui.label2'] = 'Chose Gang',\n  ['setgangui.label3'] = 'Chose Grade',\n  -- update markers menu\n  ['update.marker.label'] = 'Chose Gang',\n  ['update.marker.action'] = 'Chose Action',\n  ['update.marker.boss'] = 'Boss Marker',\n  ['update.marker.vehicle'] = 'Vehicle Marker',\n  ['update.marker.delete'] = 'Delete Vehicle Marker',\n  ['update.marker.heli'] = 'Helicotper',\n  ['update.marker.level'] = 'Level Marker',\n  ['update.marker.stash'] = 'Stash',\n  ['update.marker.pickmafia'] = 'Pick Gang',\n  ['update.marker.noheli'] = 'This Gang doesnt have Helicotper marker, do you want to create it?',\n  -- helicopter menu creator\n  ['heli'] = 'Helicopter Menu',\n  ['heli.label'] = 'Helicopter Label',\n  ['heli.label.placeholder'] = 'Maverick',\n  ['heli.spawncode'] = 'Spawn Code',\n  ['heli.spawncode.placeholder'] = 'Maverick',\n  ['lvluped'] = 'Level updated to %s',\n  -- creator notify\n  ['alert.header'] = 'Marker Creation',\n  ['alert.content'] = 'You will need to put markers for: Vehicles, Boss Menu, Stash',\n  ['textui.boss'] = '[E] - Save position for Boss Actions',\n  ['textui.veh'] = '[E] - Save position for Vehicle',\n  ['textui.dellveh'] = '[E] - Save position for Save Vehicles',\n  ['textui.stash'] = '[E] - Save position for Save Stash',\n  ['textui.heli'] = '[E] - Save position for Helicopters',\n  ['textui.lvl'] = '[E] - Save position for Level',\n  \n  -- ### CREATOR ### ---\n  --- ### Markers/Stash ### ---\n  ['menu.lvl'] = 'Gang Level Menu',\n  ['menu.maxlvl'] = 'Max Level',\n  ['menu.lvl.currentlvl'] = 'Current Level: %s',\n  ['menu.lvl.title'] = 'Level %s',\n  ['menu.lvl.wardrobe'] = 'Wardrobe',\n  ['menu.lvl.title.description'] = 'Hover to see description for next level\\nPrice for next level: %s',\n  ['menu.lvl.description'] = 'Increases stash size to %s slots and weight to %s kg',\n  ['menu.openstash'] = 'Open Stash',\n  ['target.openstash'] = 'Open Stash',\n  ['target.openstash.icon'] = 'fas fa-box-open',\n  ['stash.dialog'] = 'Enter Stash',\n  ['stash.dialog.pw'] = 'Password',\n  ['stash.wrong.pw'] = 'Wrong Pw',\n  ['marker.boss'] = '[E] - Open Boss Menu',\n  ['marker.veh'] = '[E] - Open Vehicle Menu',\n  ['marker.veh.park'] = '[E] - To park',\n  ['marker.heli'] = '[E] - Open Helicopter Menu',\n  ['marker.lvl'] = '[E] - Open Level Menu',\n  ['marker.stash'] = '[E] - Open Stash',\n  --- ### Markers/Stash ### ---\n  -- ### Command ### --\n  ['command.name.creator.help'] = 'Create New Gang',\n  ['command.name.tpbase.help'] = 'Teleport to Gang base',\n  ['command.name.dellorg.help'] = 'Remove Gang',\n  ['command.dellorg.nomafia'] = 'There is no registered gang/s',\n  ['command.dellorg.canceled'] = 'You canceled deleting gang',\n  ['command.dellorg.delted'] = 'Your gang is deleted, we are removing job from you',\n  ['command.updateCars.description'] = 'Command for updating integrated vehicles in gang',\n  ['command.updateHeli.description'] = 'Command for updating integrated helicotpers in gang',\n  ['command.setgang.help'] = 'Command for setting gang to player',\n  -- ### Command ### --\n  -- ### Vehicles Menu ### --\n  ['vehmenu.title'] = 'Vehicle Menu',\n  ['vehmenu.integrated'] = 'Integrated Vehicles',\n  ['vehmenu.heli'] = 'Helicopter Menu',\n  ['vehmenu.integrated.description'] = 'Vehicles that are integrated in this gang',\n  ['vehmenu.ownedveh'] = 'Purchased Vehicles',\n  ['vehmenu.ownedveh.description'] = 'Vehicles bought in illegal dealership',\n  ['textui.open'] = '[E] - Open Dealership',\n  ['vehmenu.noveh'] = 'No Vehicles',\n  ['vehmenu.garage.title'] = 'Garage',\n  ['something.wrong.spawn'] = 'Something went wrong while spawning the vehicle',\n  -- ### Vehicles Menu ### --\n  -- ### Boss Menu ### --\n  ['boss.title'] = 'Boss Menu',\n  ['boss.balance'] = 'Balance: %s',\n  ['boss.players'] = 'Player Managment',\n  ['boss.players.hire'] = 'Hire People',\n  ['boss.players.members'] = 'Members',\n  ['boss.players.moneyhandler'] = 'Money Handler',\n  ['boss.players.list'] = 'Total Members: %s',\n  ['boss.players.status.online'] = 'Online',\n  ['boss.players.status.offline'] = 'Offline',\n  ['boss.players.description'] = 'Grade: %s',\n  ['boss.players.grade'] = 'Update Grade',\n  ['boss.players.grade.derank'] = 'Fire Person',\n  ['boss.players.offline'] = 'Offline Players',\n  ['boss.no.players.offline'] = 'You dont have offline players',\n  ['boss.players.chose'] = 'Chose Option',\n  ['boss.players.online'] = 'Online Players',\n  ['boss.players.hired'] = 'You hired: %s %s',\n  ['boss.players.hire.samejob'] = 'That person has same job as you',\n  ['boss.nonearby'] = 'No players nearby',\n  ['boss.players.gothired'] = 'You got job: %s - %s',\n  ['boss.menu.withdraw'] = 'You have withdrawn $%s',\n  ['boss.menu.deposit'] = 'You have deposited $%s',\n  ['boss.deposit.howmuch'] = 'How much you would like to deposit?',\n  ['boss.deposit.amount'] = 'Amount',\n  ['boss.withdraw.title'] = 'Withdraw',\n  ['boss.deposit.title'] = 'Deposit',\n  -- ### Boss Menu ### --\n  --- ### Dealership ### ---\n  ['dealership.title'] = 'Dealership',\n  ['dealership.description.info'] = 'Price: $%s | Speed: %s | Required Level: %s',\n  ['description.cantopen'] = 'You cant use this while in dealership menu',\n  ['dealership.primaryColor'] = 'Primary Color',\n  ['dealership.secondaryColor'] = 'Secondary Color',\n  ['dealership.buy'] = 'Buy',\n  ['dealership.money'] = 'Money',\n  ['dealership.bank'] = 'Bank',\n  ['dealership.pickcolor'] = 'Pick Color',\n  ['dealership.nomoney'] = 'No Money',\n  --- ### Dealership ### ---\n  --- ### Discord Logs ### ---\n  ['discord.mafiacreating'] = '`%s` has created `%s` gang',\n  ['discord.spawncar.title'] = 'Spawn Car - Potentially Cheater',\n  ['discord.spawncar.msg'] = '%s tried to trigger event for spawning vehicle without having gang job, executor?',\n  ['discord.hire.cheater.title'] = 'Hire People - Potentially Cheater',\n  ['discord.hire.cheater.msg'] = '%s tried to hire %s in %s but doesnt have boss grade, grade %s',\n  ['discord.hire.title'] = 'Hire People',\n  ['discord.hire.msg'] = '%s has hired %s in %s',\n  ['discord.gradeUpdate.title.cheater'] = 'Grade Update',\n  ['discord.gradeUpdate.msg.cheater'] = '%s tried to update job for %s but isnt boss',\n  ['discord.gradeUpdate.online.title'] = 'Update Grade - Online',\n  ['discord.gradeUpdate.online.msg'] = '%s updated grade for %s to grade %s',\n  ['discord.gradeUpdate.offline.title'] = 'Update Grade - Online',\n  ['discord.gradeUpdate.offline.msg'] = '%s updated grade for %s to grade %s',\n  ['discord.withdraw.title'] = 'Money Withdraw',\n  ['discord.withdraw.msg'] = '%s has withdrawn $%s from %s',\n  ['discord.deposit.title'] = 'Money Deposit',\n  ['discord.deposit.msg'] = '%s has deposited $%s in %s',\n  ['discord.dealership.title'] = 'Vehicle Purchase',\n  ['discord.dealership.msg'] = '%s has bought %s for %s gang',\n  ['discord.vehs.delete.title'] = 'Vehicle Deleting',\n  ['discord.vehs.delete.msg'] = '%s has deleted %s from %s',\n  ['discord.vehs.new.title'] = 'Inserting New Vehicles',\n  ['discord.vehs.new.msg'] = '%s has added %s to %s',\n  ['discord.vehs.edit.title'] = 'Updating Vehicles',\n  ['discord.vehs.edit.msg'] = '%s has updated %s in %s: \\nPrimary Color: `%s`\\nSecondary Color: `%s`\\nFull Tune: `%s`',\n  ['discord.mafia.levelUP.title'] = 'Gang Level Update',\n  ['discord.mafia.levelUP.msg'] = '%s (Job: %s) has leveled up gang to %s level',\n  ['discord.firePerson.title'] = 'Firing People From Gang',\n  ['discord.firePerson.msg'] = '`%s` has fired `%s` from `%s`',\n  ['discord.firePerson.cheater.title'] = 'Fire People - Potentially Cheater',\n  ['discord.firePerson.cheater.msg'] = '`%s` tried to fire people in `%s` without boss grade, his grade: `%s`',\n  ['discord.creatingMafia.title'] = 'Creating Gang',\n  ['discord.creatingMafia.msg'] = '`%s` has created `%s` gang',\n  ['discord.update.boss.title'] = 'Boss Marker Updated',\n  ['discord.update.boss.msg'] = '`%s` has updated `Boss Marker` for `%s`. New Coords: `%s`',\n  ['discord.update.veh.title'] = 'Vehicle Marker Updated',\n  ['discord.update.veh.msg'] = '`%s` has updated `Vehicle Marker` for `%s`. New Coords: `%s`',\n  ['discord.update.heli.title'] = 'Helicopter Marker Updated',\n  ['discord.update.heli.msg'] = '`%s` has updated `Helicotper Marker` for `%s`. New Coords: `%s`',\n  ['discord.update.lvl.title'] = 'Level Marker Updated',\n  ['discord.update.lvl.msg'] = '`%s` has updated `Level Marker` for `%s`. New Coords: `%s`',\n  ['discord.update.stash.title'] = 'Stash Updated',\n  ['discord.update.stash.msg'] = '`%s` has updated `Stash Position` for `%s`. New Coords: `%s`',\n  --- ### Discord Logs ### ---\n  --- ### Impound ### ---\n  ['impound.title'] = 'Impound',\n  ['impound.nomoney'] = 'You dont have money to impound this vehicle',\n  ['impound.noveh'] = 'No Vehicles at Impound',\n  ['impound.alert'] = 'Would you like to impound %s for $%s',\n  --- ### Impound ### ---\n  --- ### Actions ### ---\n  ['actions.menu.title'] = 'Gang Action Menu',\n  ['actions.menu.search'] = 'Search',\n  ['actions.menu.cuff'] = 'Cuffing',\n  ['actions.menu.escort'] = 'Escort',\n  ['actions.menu.vehicle'] = 'Vehicle',\n  ['actions.menu.vehicle.put'] = 'Put in vehicle',\n  ['actions.menu.vehicle.takeout'] = 'Take Out',\n  ['actions.notcuffed'] = 'Player Not Cuffed',\n  ['actions.keymaping.description'] = 'Press F6 to open Gang Action Menu',\n  ['actions.stop.escort.target'] = '[Enter] - to stop escort',\n  --- ### Actions ### ---\n  -- Armory\n  ['remove_object'] = 'Withdraw Object',\n  ['deposit_object'] = 'Deposit Object',\n  ['inventory'] = 'Inventory',\n  ['get_weapon'] = 'Withdraw weapon from armory',\n  ['put_weapon'] = 'Store weapon in armory',\n  ['armory'] = 'Armory',\n  ['get_weapon_menu'] = 'Armory - Withdraw Weapon',\n  ['put_weapon_menu'] = 'Armory - Store Weapon',\n  ['confirm'] = 'Confirm',\n  ['quantity_invalid'] = 'Invalid quantity',\n  ['quantity'] = 'Quantity',\n  ['quantity_placeholder'] = 'Amount to withdraw..',\n  ['remove.metadata.gang'] = 'You removed gang from %s',\n  ['your.gang.is'] = 'Your gang is: %s - %s',\n  ['no.gang'] = 'You are not in any gang',\n  ['cant.find.gang.info'] = 'Cant find data for your gang :/',\n  ['gang.no.exist'] = 'That gang or grade doesnt exist',\n  ['open.impound.ui'] = '[E] - Open Impound',\n  ['got.paycheck'] = 'You got paycheck of $%s on your bank',\n  ['no.lvl'] = 'Your gang inst hight enough level to purchase this vehicle'\n}"}},"/server":{"title":"Server","data":{"":"Why buy blind? Our testing server lets you experience assets before purchase. Test everything yourself first.","server-info#Server Info":"IP: connect 176.9.178.4:30010\nArtifacts: 17000\nGame Build: 3570 (Money Fronts)\nFramework: ESX Legacy (1.13.1)\nInventory: Ox Inventory (2.44.6)\nAfter successfully creating a character, you will be granted group admin privileges, entitling you to access all administrator commands, excluding the starting and stopping resources."}},"/escrow":{"title":"FiveM asset escrow errors","data":{"you-lack-the-required-entitlement-to-use-x#You lack the required entitlement to use X":"Make sure that your server's license key is owned by the same Portal account that owns the asset. If it is on the same account, restart your server. If not, transfer the asset to the same account as your server's license key. Please note that you can only transfer assets once.","failed-to-verify-protected-resource-x#Failed to verify protected resource X":"This error means that files were corrupted during the download. Most times this happens because you use FileZilla, which doesn't work well with encrypted files. Try using WinSCP instead.","error-parsing-script-y-in-resource-x-y-syntax-error-near-1#Error parsing script @Y in resource X: @Y: syntax error near <\\1>":"This error means that your server artifacts are outdated. Update to the latest recommended version."}},"/free/garages/install":{"title":"Install","data":{"":"Installation guide for Object Creator","install-mariadb#Install MariaDB":"Do not use XAMPP\nInstall the latest stable version of MariaDB, if you don't have it already.","sql-file#SQL file":"Do not use phpMyAdmin\nThe SQL code should install automatically. However, if it doesn't, you can manually run the following code using HeidiSQL.\nCREATE TABLE IF NOT EXISTS `mh_garage` (\n    `owner` varchar(60) DEFAULT NULL,\n    `name` varchar(100) NOT NULL,\n    `data` longtext DEFAULT NULL,\n    UNIQUE KEY `owner` (`owner`,`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;","install-dependecies#Install Dependecies":"Download and install the following dependencies:\noxmysql\nox_lib\nup-to-date server artifacts\nDownload dependencies and add them to your resources folder.","add-to-servercfg#Add to server.cfg":"Find your resources folder, inside create a new folder named [modhaven] if one doesn't already exist, download the asset from github and move into [modhaven], and add ensure [modhaven] at the end of your server.cfg file. Make sure that all dependencies listed above are started before our asset."}},"/paid/crypto/install":{"title":"Installation","data":{"":"Installation guide for Object Creator","install-mariadb#Install MariaDB":"Do not use XAMPP\nInstall the latest stable version of MariaDB, if you don't have it already.","sql-file#SQL file":"Do not use phpMyAdmin\nThe SQL code should install automatically. However, if it doesn't, you can manually run the following code using HeidiSQL.\n  CREATE TABLE IF NOT EXISTS `mh_crypto` (\n      `name` varchar(50) DEFAULT NULL,\n      `data` longtext DEFAULT NULL\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;","install-dependecies#Install Dependecies":"Download and install the following dependencies:\noxmysql\nox_lib\nup-to-date server artifacts\nDownload dependencies and add them to your resources folder.","add-to-servercfg#Add to server.cfg":"Find your resources folder, inside create a new folder named [modhaven] if one doesnâ€™t already exist, download asset from Portal and move into [modhaven], and add ensure [modhaven] at the end of your server.cfg file. Make sure that all dependencies listed above are started before our asset."}},"/paid/evidence/install":{"title":"Installation","data":{"":"Installation guide for Object Creator","install-mariadb#Install MariaDB":"Do not use XAMPP\nInstall the latest stable version of MariaDB, if you don't have it already.","sql-file#SQL file":"Do not use phpMyAdmin\nThe SQL code should install automatically. However, if it doesn't, you can manually run the following code using HeidiSQL.\nCREATE TABLE IF NOT EXISTS `uniq_evidence` (\n  `caseId` varchar(50) DEFAULT NULL,\n  `type` varchar(50) DEFAULT NULL,\n  `data` longtext DEFAULT NULL,\n  `time` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;","install-dependecies#Install Dependecies":"Download and install the following dependencies:\noxmysql\nox_lib\nup-to-date server artifacts\nDownload dependencies and add them to your resources folder.","adding-items#Adding Items":"In ox_inventory/data/items.lua add following:\n['empty_evidence_bag'] = {\n    label = 'Empty Evidence Bag',\n    stack = true,\n    close = false,\n    weight = 50\n},\n['bullet_shell_evidence'] = {\n    label = 'Bullet Shell Evidence',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['bullet_evidence'] = {\n    label = 'Bullet Evidence',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['blood_evidence'] = {\n    label = 'Blood Evidence',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['uv_flashlight'] = {\n    label = 'UV Flashlight',\n    stack = false,\n    close = true,\n    weight = 850\n},\n['vehicle_prints_evidence'] = {\n    label = 'Vehicle Fingerprints Evidnece',\n    stack = false,\n    close = false,\n    weight = 50\n},\n['tweezers'] = {\n    label = 'Tweezers',\n    stack = true,\n    close = true,\n    weight = 15\n},\n['cleaning_kit'] = {\n  label = 'Cleaning Kit',\n  stack = true,\n  close = true,\n  weight = 450\n},\n['cleaning_shells'] = {\n  label = 'Cleaning Kit',\n  stack = true,\n  close = true,\n  weight = 450\n},\nExecute following SQL:\nINSERT INTO `items` (`name`, `label`, `weight`, `rare`, `can_remove`, `x`, `y`, `category`, `componentTint`, `componentHash`, `backpackModel`, `backgroundTexture`, `description`) VALUES\n  ('empty_evidence_bag', 'Empty Evidence Bag', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('bullet_shell_evidence', 'Bullet Shell Evidence', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('bullet_evidence', 'Bullet Evidence', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('blood_evidence', 'Blood Evidence', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('uv_flashlight', 'UV Flashlight', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('tweezers', 'Tweezers', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('vehicle_prints_evidence', 'Vehicle Fingerprints Evidnece', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('cleaning_kit', 'Cleaning Kit', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, ''),\n  ('cleaning_shells', 'Cleaning Kit', 1, 0, 1, 1, 1, 'misc', NULL, NULL, NULL, NULL, '');\nIn qb-core/shared/items.lua add following:\nempty_evidence_bag           = { name = 'empty_evidence_bag', label = 'Empty Evidence Bag', weight = 0, type = 'item', image = 'empty_evidence_bag.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_shell_evidence        = { name = 'bullet_shell_evidence', label = 'Bullet Shell Evidence', weight = 0, type = 'item', image = 'bullet_shell_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_evidence              = { name = 'bullet_evidence', label = 'Bullet Evidence', weight = 0, type = 'item', image = 'bullet_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nblood_evidence               = { name = 'blood_evidence', label = 'Blood Evidence', weight = 0, type = 'item', image = 'blood_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nuv_flashlight                = { name = 'uv_flashlight', label = 'UV Flashlight', weight = 0, type = 'item', image = 'uv_flashlight.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ntweezers                     = { name = 'tweezers', label = 'Tweezers', weight = 0, type = 'item', image = 'tweezers.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\nvehicle_prints_evidence      = { name = 'vehicle_prints_evidence', label = 'Vehicle Fingerprints Evidnece', weight = 0, type = 'item', image = 'vehicle_prints_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\ncleaning_kit                 = { name = 'cleaning_kit', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_kit.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ncleaning_shells              = { name = 'cleaning_shells', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_shells.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\nIn qs-inventory/shared/items.lua add following:\n['empty_evidence_bag']           = {\n  ['name'] = 'empty_evidence_bag',\n  ['label'] = 'Empty Evidence Bag',\n  ['weight'] = 0,\n  ['type'] = 'item',\n  ['image'] = 'empty_evidence_bag.png',\n  ['unique'] = false,\n  ['useable'] = false,\n  ['shouldClose'] = false,\n  ['combinable'] = nil,\n  ['description'] = 'Used a lot to keep DNA from blood, bullet shells and more'\n},\n['bullet_shell_evidence']           = {\n    ['name'] = 'bullet_shell_evidence',\n    ['label'] = 'Bullet Shell Evidence',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'bullet_shell_evidence.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['bullet_evidence']           = {\n    ['name'] = 'bullet_evidence',\n    ['label'] = 'Bullet Evidence',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'bullet_evidence.png',\n    ['unique'] = true,\n    ['useable'] = false,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['blood_evidence']           = {\n    ['name'] = 'blood_evidence',\n    ['label'] = 'Blood Evidence',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'blood_evidence.png',\n    ['unique'] = true,\n    ['useable'] = false,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['uv_flashlight']           = {\n    ['name'] = 'uv_flashlight',\n    ['label'] = 'UV Flashlight',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'uv_flashlight.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['tweezers']           = {\n    ['name'] = 'tweezers',\n    ['label'] = 'Tweezers',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'tweezers.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['vehicle_prints_evidence']           = {\n    ['name'] = 'vehicle_prints_evidence',\n    ['label'] = 'Vehicle Fingerprints Evidnece',\n    ['weight'] = 0,\n    ['type'] = 'item',\n    ['image'] = 'vehicle_prints_evidence.png',\n    ['unique'] = true,\n    ['useable'] = false,\n    ['shouldClose'] = false,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['cleaning_kit']           = {\n    ['name'] = 'cleaning_kit',\n    ['label'] = 'Cleaning Kit',\n    ['weight'] = 450,\n    ['type'] = 'item',\n    ['image'] = 'cleaning_kit.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\n['cleaning_shells']           = {\n    ['name'] = 'cleaning_shells',\n    ['label'] = 'Cleaning Kit',\n    ['weight'] = 450,\n    ['type'] = 'item',\n    ['image'] = 'cleaning_shells.png',\n    ['unique'] = false,\n    ['useable'] = true,\n    ['shouldClose'] = true,\n    ['combinable'] = nil,\n    ['description'] = ''\n},\nIn codem-inventory/config/itemlist.lua add following:\nempty_evidence_bag           = { name = 'empty_evidence_bag', label = 'Empty Evidence Bag', weight = 0, type = 'item', image = 'empty_evidence_bag.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_shell_evidence        = { name = 'bullet_shell_evidence', label = 'Bullet Shell Evidence', weight = 0, type = 'item', image = 'bullet_shell_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nbullet_evidence              = { name = 'bullet_evidence', label = 'Bullet Evidence', weight = 0, type = 'item', image = 'bullet_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nblood_evidence               = { name = 'blood_evidence', label = 'Blood Evidence', weight = 0, type = 'item', image = 'blood_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\nuv_flashlight                = { name = 'uv_flashlight', label = 'UV Flashlight', weight = 0, type = 'item', image = 'uv_flashlight.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ntweezers                     = { name = 'tweezers', label = 'Tweezers', weight = 0, type = 'item', image = 'tweezers.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\nvehicle_prints_evidence      = { name = 'vehicle_prints_evidence', label = 'Vehicle Fingerprints Evidnece', weight = 0, type = 'item', image = 'vehicle_prints_evidence.png', unique = false, useable = false, shouldClose = false, combinable = nil, description = '' },\ncleaning_kit                 = { name = 'cleaning_kit', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_kit.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },\ncleaning_shells              = { name = 'cleaning_shells', label = 'Cleaning Kit', weight = 450, type = 'item', image = 'cleaning_shells.png', unique = false, useable = true, shouldClose = true, combinable = nil, description = '' },","add-to-servercfg#Add to server.cfg":"Find your resources folder, inside create a new folder named [modhaven] if one doesnâ€™t already exist, move the asset from keymaster/portal into [uniq], and add ensure [uniq] at the end of your server.cfg file. Make sure that all dependencies listed above are started before our asset."}},"/paid/gang/install":{"title":"Installation","data":{"":"Installation guide for Object Creator","install-mariadb#Install MariaDB":"Do not use XAMPP\nInstall the latest stable version of MariaDB, if you don't have it already.","sql-file#SQL file":"Do not use phpMyAdmin\nThe SQL code should install automatically. However, if it doesn't, you can manually run the following code using HeidiSQL.\nCREATE TABLE IF NOT EXISTS `mh_gang` (\n  `name` varchar(25) DEFAULT NULL,\n  `data` longtext DEFAULT NULL,\n  `level` tinyint(4) DEFAULT NULL,\n  `money` int(11) DEFAULT 0,\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\nCREATE TABLE IF NOT EXISTS `mh_gang_garage` (\n  `owner` varchar(46) DEFAULT NULL,\n  `label` varchar(46) DEFAULT NULL,\n  `plate` varchar(12) DEFAULT NULL,\n  `vehicle` longtext NOT NULL,\n  `stored` int(11) NOT NULL DEFAULT 0\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\nCREATE TABLE IF NOT EXISTS `mh_gang_users` (\n  `identifier` longtext DEFAULT NULL,\n  `job` longtext DEFAULT '[]',\n  UNIQUE KEY `identifier` (`identifier`) USING HASH\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\nCREATE TABLE IF NOT EXISTS `mh_gang` (\n  `name` varchar(25) DEFAULT NULL,\n  `data` longtext DEFAULT NULL,\n  `level` tinyint(4) DEFAULT NULL,\n  `money` int(11) DEFAULT 0,\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\nCREATE TABLE IF NOT EXISTS `mh_gang_garage` (\n  `owner` varchar(46) DEFAULT NULL,\n  `label` varchar(46) DEFAULT NULL,\n  `plate` varchar(12) DEFAULT NULL,\n  `vehicle` longtext NOT NULL,\n  `stored` int(11) NOT NULL DEFAULT 0\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\nCREATE TABLE IF NOT EXISTS `mh_gang_data` (\n  `name` longtext DEFAULT NULL,\n  `label` longtext DEFAULT NULL,\n  `grades` longtext DEFAULT NULL,\n  UNIQUE KEY `name` (`name`) USING HASH\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;","install-dependecies#Install Dependecies":"Download and install the following dependencies:\noxmysql\nox_lib\nup-to-date server artifacts\nDownload dependencies and add them to your resources folder.","add-to-servercfg#Add to server.cfg":"Find your resources folder, inside create a new folder named [modhaven] if one doesnâ€™t already exist, download the asset from keymaster/portal and move into [modhaven], and add ensure [modhaven] at the end of your server.cfg file. Make sure that all dependencies listed above are started before our asset."}}}